"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/05/20/caesar-2-0","metadata":{"permalink":"/blog/2024/05/20/caesar-2-0","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2024-05-20-caesar-2-0.md","source":"@site/blog/2024-05-20-caesar-2-0.md","title":"Caesar 2.0: VSCode Extension, Slicing, and more!","description":"We are happy to announce Caesar 2.0: the next release of Caesar packed with a lot of new features.","date":"2024-05-20T00:00:00.000Z","formattedDate":"May 20, 2024","tags":[{"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":4.34,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"authors":"phisch","tags":["releases"]},"nextItem":{"title":"ERC Proof of Concept Grant","permalink":"/blog/2024/01/18/erc-poc-grant"}},"content":"We are happy to announce *Caesar 2.0*: the next release of Caesar packed with a lot of new features.\\n\\n**Overview:**\\n 1. [*Caesar Verifier* Visual Studio Code Extension](#caesar20-vscode-extension)\\n 2. [Slicing for Error Reporting and Correctness](#caesar20-slicing)\\n 3. [Calculus Annotations for Proof Rules](#caesar20-calculi)\\n 4. [Model Checking Support via JANI](#caesar20-jani)\\n\\n## *Caesar Verifier* Visual Studio Code Extension {#caesar20-vscode-extension}\\n\\n```mdx-code-block\\nimport Link from \'@docusaurus/Link\';\\n```\\n\\n<Link to=\\"https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar\\">\\n  <img src=\\"/img/vc-demo.png\\" style={{\\"float\\": \\"right\\", \\"maxWidth\\": \\"350px\\", \\"margin-left\\": \\"1em\\"}} className=\\"item shadow--tl\\" />\\n</Link>\\n\\nOur new *Caesar Verifier* VSCode extension is now the recommended way to use Caesar.\\nThe extension is available in the VSCode and VSCodium extension marketplaces and can be installed by searching for *Caesar Verifier*.\\n\\nThe extension is built on the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) and uses the Caesar binary under the hood.\\n\\n<Link class=\\"button button--primary\\" to=\\"https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar\\">Go to Caesar Verifier on VSCode Marketplace</Link>\\n\\n<br /><br />\\n\\n**Features:**\\n * Syntax highlighting and language configuration for HeyVL.\\n * Snippets for HeyVL.\\n * Verify HeyVL files on file save or on command.\\n * Verification errors and successes are shown in the gutter via icons.\\n * Diagnostics such as errors or warnings are shown in the code and in the \\"Problems\\" menu in VSCode &mdash; [powered by slicing!](#caesar20-slicing)\\n * Inline explanations of computed verification conditions (shown in picture!).\\n * Automatic installation and updating of Caesar.\\n\\n<div style={{\\"clear\\": \\"both\\"}} />\\n\\n## Slicing for Error Reporting and Correctness {#caesar20-slicing}\\n\\n### Assertion Slicing\\n\\n<Link to=\\"/img/slicing-demo.png\\">\\n    <img src=\\"/img/slicing-demo.png\\" style={{\\"float\\": \\"right\\", \\"maxWidth\\": \\"350px\\", \\"margin-left\\": \\"1em\\"}} className=\\"item shadow--tl\\" />\\n</Link>\\n\\nThe error reports in Caesar are driven by the first implementation of specification-based slicing for probabilistic programs.\\nBy default, our slicing implementation is used to identify which `assert`-like statements are responsible for errors ([Caesar\'s *assertion slicing*](/docs/caesar/slicing#assertion-slicing)).\\n\\nAn example is shown on the right.\\nThe slicing algorithm has determined that the invariant might not be inductive and could rule out e.g. that the pre does not entail the invariant.\\n\\nCaesar\'s slicing does not operate on high-level programs with loops, but instead on the low-level HeyVL statements, including verification statements.\\nThis enables error reporting (and other slicing applications) for any verification problems that you can encode in HeyVL.\\nCustom error messages can be added via [slice message annotations](/docs/caesar/slicing#slicing-message-annotations).\\n\\n<div style={{\\"clear\\": \\"both\\"}} />\\n\\n### Assumption Slicing\\n\\n<Link to=\\"/img/assumption-slicing-demo.png\\">\\n    <img src=\\"/img/assumption-slicing-demo.png\\" style={{\\"float\\": \\"right\\", \\"maxWidth\\": \\"330px\\", \\"margin-left\\": \\"1em\\"}} className=\\"item shadow--tl\\" />\\n</Link>\\n\\nWhereas assertion slicing is concerned with finding a minimal set of assertions in the program so that the program still has an error, [*assumption slicing*](/docs/caesar/slicing#assumption-slicing) tries to find a minimal set of assumptions so that the program still verifies.\\n\\nIn the example on the right, we can see a slightly modified version of the geometric loop example from above.\\nNow it has a constant starting value of zero.\\nWith the correct invariant, the program verifies.\\nBut Caesar can also tell us that this `while` loop could also be an `if` statement &mdash; no loop is required to satisfy the specification.\\nThe interpretation of this result is up to the user.\\nMaybe the program can be simplified, but maybe the specification is not as strong as one thought and needs to be strengthened!\\n\\n<div style={{\\"clear\\": \\"both\\"}} />\\n\\n### General Slicing\\n\\n<Link to=\\"/img/general-slicing-demo.png\\">\\n    <img src=\\"/img/general-slicing-demo.png\\" style={{\\"float\\": \\"right\\", \\"maxWidth\\": \\"400px\\", \\"margin-left\\": \\"1em\\"}} className=\\"item shadow--tl\\" />\\n</Link>\\n\\nCaesar\'s implementation of slicing is not restricted to verification statements such as assertions and assumptions.\\nWith program annotations, Caesar can be instructed to run slicing for correctness and try to eliminate unnecessary assignments from the program.\\n\\nIn the example on the right, we have a probabilistic program that encodes a Bayesian network.[^1]\\nWe have added the [`@slice_verify` annotation](/docs/caesar/slicing#general-slicing-for-correctness) to have Caesar also try to slice assignments.\\nCaesar determined that most assignments are not necessary to satisfy the specification.\\n\\nThere is also a corresponding [`@slice_error` annotation](/docs/caesar/slicing#general-slicing-for-errors) to do slicing for errors on statements that are not `assert`-like.\\n\\n<div style={{\\"clear\\": \\"both\\"}} />\\n\\n## Calculus Annotations for Proof Rules {#caesar20-calculi}\\n\\n<Link to=\\"/img/calculi-demo.png\\">\\n    <img src=\\"/img/calculi-demo.png\\" style={{\\"float\\": \\"right\\", \\"maxWidth\\": \\"400px\\", \\"margin-left\\": \\"1em\\"}} className=\\"item shadow--tl\\" />\\n</Link>\\n\\nCaesar\'s HeyVL was designed as a [quantitative intermediate verification language](/docs/publications#oopsla-23), therefore it allows encoding all sorts of potentially unsound proof rules.\\nTo make it easier to use Caesar to verify high-level programs with loops with respect to well-known expectation-based calculi and proof rules, we have added [calculus annotations](/docs/proof-rules/calculi) to Caesar.\\nThey are `@wp`, `@wlp` and `@ert`.\\nWhen they are added to a `proc`/`coproc`, Caesar will do some additional checks to ensure that proof rules are actually sound.\\n\\n<div style={{\\"clear\\": \\"both\\"}} />\\n\\n## Model Checking Support via JANI {#caesar20-jani}\\n\\nWhile deductive verification can deal with infinite state spaces, infinite data types, and is generally pretty awesome, sometimes you want to analyze a proabilistic program whose state space can be finitely represented.\\nWith [Caesar\'s model checking support via JANI](/docs/model-checking), you can export your probabilistic program to the [JANI format](https://jani-spec.org/) to use probabilistic model checkers.\\n\\nCaesar\'s support is limited to [executable probabilistic programs](/docs/model-checking#supported-programs).\\nThat means that quantitative verification statements like `assert`, `assume`, and `havoc` are restricted or not supported.\\n\\nCaesar\'s JANI export was designed as a replacement for [the recently deleted storm-pgcl](https://github.com/moves-rwth/storm/pull/456), and can now be used as a pGCL frontend for model checkers that accept JANI inputs.\\n\\n[^1]: The program is Figure 7 of [Marcelo Navarro, Federico Olmedo: Slicing of Probabilistic Programs Based on Specifications. ECOOP 2022](https://doi.org/10.1016/j.scico.2022.102822)."},{"id":"/2024/01/18/erc-poc-grant","metadata":{"permalink":"/blog/2024/01/18/erc-poc-grant","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2024-01-18-erc-poc-grant.md","source":"@site/blog/2024-01-18-erc-poc-grant.md","title":"ERC Proof of Concept Grant","description":"We are happy to announce that RWTH\'s MOVES group, headed by Prof. Joost-Pieter Katoen, will receive funding from the European Research Council (ERC) for a Proof of Concept Grant to improve Caesar.","date":"2024-01-18T00:00:00.000Z","formattedDate":"January 18, 2024","tags":[{"label":"grants","permalink":"/blog/tags/grants"}],"readingTime":0.54,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"title":"ERC Proof of Concept Grant","authors":"phisch","tags":["grants"]},"prevItem":{"title":"Caesar 2.0: VSCode Extension, Slicing, and more!","permalink":"/blog/2024/05/20/caesar-2-0"},"nextItem":{"title":"Talk at the Dafny 2024 Workshop","permalink":"/blog/2024/01/14/dafny-2024-talk"}},"content":"We are happy to announce that RWTH\'s [MOVES group](https://moves.rwth-aachen.de/), headed by Prof. Joost-Pieter Katoen, will receive funding from the European Research Council (ERC) for a [Proof of Concept Grant](https://erc.europa.eu/apply-grant/proof-concept) to improve Caesar.\\n\\nCaesar was originally built in part through [FRAPPANT](https://moves.rwth-aachen.de/research/projects/frappant/), the 2018 ERC Advanced Grant \\"Formal Reasoning about Probabilistic Programs: Breaking New Ground for Automation\\".\\nThe new ERC Proof of Concept research proposal \\"A Deductive Verifier for Probabilistic Programs (VERIPROB)\\" is about applying knowledge from FRAPPANT to build Caesar into a prototype that can be made use of by industry &mdash; \\"to turn science into practice\\".\\n\\nSee also the [press release by the university](https://www.rwth-aachen.de/cms/root/die-rwth/aktuell/pressemitteilungen/januar/~bfqqei/die-arbeit-mit-der-wahrscheinlichkeit/?lidx=1) and [the ERC announcement](https://erc.europa.eu/news-events/news/Proof-of-Concept-Grants-2023)."},{"id":"/2024/01/14/dafny-2024-talk","metadata":{"permalink":"/blog/2024/01/14/dafny-2024-talk","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2024-01-14-dafny-2024-talk.md","source":"@site/blog/2024-01-14-dafny-2024-talk.md","title":"Talk at the Dafny 2024 Workshop","description":"On January 14, 2024, I presented Caesar and the basics of our quantitative intermediate language HeyVL at the Dafny 2024 workshop.","date":"2024-01-14T00:00:00.000Z","formattedDate":"January 14, 2024","tags":[{"label":"talks","permalink":"/blog/tags/talks"}],"readingTime":0.285,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"title":"Talk at the Dafny 2024 Workshop","authors":"phisch","tags":["talks"]},"prevItem":{"title":"ERC Proof of Concept Grant","permalink":"/blog/2024/01/18/erc-poc-grant"},"nextItem":{"title":"Distinguished Artifact at OOPSLA \'23","permalink":"/blog/2023/10/27/oopsla23-distinguished-artifact"}},"content":"On January 14, 2024, I presented Caesar and the basics of our quantitative intermediate language HeyVL at the [Dafny 2024 workshop](https://popl24.sigplan.org/home/dafny-2024).\\nThe workshop was part of the POPL 2024 conference.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube-nocookie.com/embed/ZLcDieBq05o?si=Cy36J26qvXpckR3q&amp;start=26188\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nThe talk starts at timestamp 7:16:23 and ends at timestamp 7:34:00."},{"id":"/2023/10/27/oopsla23-distinguished-artifact","metadata":{"permalink":"/blog/2023/10/27/oopsla23-distinguished-artifact","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2023-10-27-oopsla23-distinguished-artifact.md","source":"@site/blog/2023-10-27-oopsla23-distinguished-artifact.md","title":"Distinguished Artifact at OOPSLA \'23","description":"The artifact associated with our OOPSLA \'23 publication A Deductive Verification Infrastructure for Probabilistic Programs has received the Distinguished Artifact award, praising exceptionally high quality.","date":"2023-10-27T00:00:00.000Z","formattedDate":"October 27, 2023","tags":[{"label":"publications","permalink":"/blog/tags/publications"}],"readingTime":0.255,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"title":"Distinguished Artifact at OOPSLA \'23","authors":"phisch","tags":["publications"]},"prevItem":{"title":"Talk at the Dafny 2024 Workshop","permalink":"/blog/2024/01/14/dafny-2024-talk"},"nextItem":{"title":"Paper Accepted at OOPSLA \'23","permalink":"/blog/2023/09/28/oopsla23"}},"content":"The artifact associated with our [OOPSLA \'23](https://2023.splashcon.org/track/splash-2023-oopsla) publication [A Deductive Verification Infrastructure for Probabilistic Programs](https://doi.org/10.1145/3622870) has [received the *Distinguished Artifact* award](https://2023.splashcon.org/track/splash-2023-Artifacts#distinguished-artifacts), praising exceptionally high quality.\\nThe artifact consists the tool Caesar together with benchmark examples.\\n\\nThe artifact has a [page in the ACM Digital Library](https://dl.acm.org/do/10.5281/zenodo.8146987/full/) and can be [downloaded from Zenodo](https://zenodo.org/records/8146987)."},{"id":"/2023/09/28/oopsla23","metadata":{"permalink":"/blog/2023/09/28/oopsla23","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2023-09-28-oopsla23.md","source":"@site/blog/2023-09-28-oopsla23.md","title":"Paper Accepted at OOPSLA \'23","description":"HeyVL and Caesar were accepted at OOPSLA \'23: A Deductive Verification Infrastructure for Probabilistic Programs by Schr\xf6er et al.","date":"2023-09-28T00:00:00.000Z","formattedDate":"September 28, 2023","tags":[{"label":"publications","permalink":"/blog/tags/publications"}],"readingTime":0.235,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"title":"Paper Accepted at OOPSLA \'23","authors":"phisch","tags":["publications"]},"prevItem":{"title":"Distinguished Artifact at OOPSLA \'23","permalink":"/blog/2023/10/27/oopsla23-distinguished-artifact"},"nextItem":{"title":"Winner of the 2022 WhatsApp Privacy Aware Program Analysis Request for Proposals","permalink":"/blog/2022/10/10/whatsapp-privacy-aware-program-analysis"}},"content":"HeyVL and Caesar were accepted at [OOPSLA \'23](https://2023.splashcon.org/track/splash-2023-oopsla): [A Deductive Verification Infrastructure for Probabilistic Programs](https://doi.org/10.1145/3622870) by Schr\xf6er et al.\\nThe artifact received the _reusable_ badge, which is the highest possible badge.\\n\\nThe preprint is available on arxiv: https://arxiv.org/abs/2309.07781.\\n\\nYou can find more information on our [publications page](/docs/publications)."},{"id":"/2022/10/10/whatsapp-privacy-aware-program-analysis","metadata":{"permalink":"/blog/2022/10/10/whatsapp-privacy-aware-program-analysis","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2022-10-10-whatsapp-privacy-aware-program-analysis.md","source":"@site/blog/2022-10-10-whatsapp-privacy-aware-program-analysis.md","title":"Winner of the 2022 WhatsApp Privacy Aware Program Analysis Request for Proposals","description":"Philipp Schroer and Joost-Pieter Katoen receive a Research Award from WhatsApp, through its parent company, Meta Platforms, Inc. for their research proposal \u201cA Deductive Verification Infrastructure for Probabilistic Programs\u201d. Out of 62 research proposals that were submitted to WhatsApp Privacy Aware Program Analysis, 6 projects have been awarded. For more information, see here.","date":"2022-10-10T00:00:00.000Z","formattedDate":"October 10, 2022","tags":[{"label":"grants","permalink":"/blog/tags/grants"}],"readingTime":0.265,"hasTruncateMarker":false,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch"}],"frontMatter":{"title":"Winner of the 2022 WhatsApp Privacy Aware Program Analysis Request for Proposals","authors":"phisch","tags":["grants"]},"prevItem":{"title":"Paper Accepted at OOPSLA \'23","permalink":"/blog/2023/09/28/oopsla23"}},"content":"Philipp Schroer and Joost-Pieter Katoen receive a Research Award from WhatsApp, through its parent company, Meta Platforms, Inc. for their research proposal \u201cA Deductive Verification Infrastructure for Probabilistic Programs\u201d. Out of 62 research proposals that were submitted to WhatsApp Privacy Aware Program Analysis, 6 projects have been awarded. For more information, [see here](https://research.facebook.com/blog/2022/10/-announcing-the-winners-of-the-2022-whatsapp-privacy-aware-program-analysis-request-for-proposals/)."}]}')}}]);