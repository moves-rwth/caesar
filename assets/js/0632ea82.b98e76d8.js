"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[5466],{4562:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"getting-started/heyvl-guide","title":"Guide to HeyVL","description":"A guide to understanding and verifying HeyVL.","source":"@site/docs/getting-started/heyvl-guide.md","sourceDirName":"getting-started","slug":"/getting-started/heyvl-guide","permalink":"/docs/getting-started/heyvl-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/docs/getting-started/heyvl-guide.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"A guide to understanding and verifying HeyVL.","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Installing Caesar","permalink":"/docs/getting-started/installation"},"next":{"title":"A Zoo of HeyVL Examples","permalink":"/docs/getting-started/zoo-of-heyvl-examples"}}');var t=i(4848),o=i(8453),a=(i(1432),i(8774)),r=i(4252);const l={description:"A guide to understanding and verifying HeyVL.",sidebar_position:2},d="Guide to HeyVL",c={},h=[{value:"Contents of this guide",id:"contents-of-this-guide",level:4},{value:"What are HeyVL and Caesar?",id:"what-are-heyvl-and-caesar",level:2},{value:"Architecture",id:"architecture",level:3},{value:"Features",id:"features",level:3},{value:"Verifying Our First Program: Lossy List Traversal",id:"verifying-our-first-program-lossy-list-traversal",level:2},{value:"The Probabilistic Program Itself",id:"the-probabilistic-program-itself",level:3},{value:"What does the program do?",id:"what-does-the-program-do",level:4},{value:"What do we want to verify?",id:"what-do-we-want-to-verify",level:4},{value:"User-Defined Datatypes and Functions",id:"user-defined-datatypes-and-functions",level:3},{value:"The List Type",id:"the-list-type",level:4},{value:"The Exponential Function",id:"the-exponential-function",level:4},{value:"Specifications and Invariants",id:"specifications-and-invariants",level:3},{value:"Specifications",id:"specifications",level:4},{value:"Invariants and Other Proof Rules",id:"invariants",level:4},{value:"Running the Complete Example",id:"full-example",level:3},{value:"Reasoning About Upper Bounds (Coprocedures)",id:"upper-bounds",level:3},{value:"Verification Statements",id:"verification-statements",level:2},{value:"Boolean Verification Statements",id:"boolean-verification-statements",level:3},{value:"Embed Expressions",id:"embed-expressions",level:4},{value:"Boolean Assertions",id:"boolean-assertions",level:4},{value:"Boolean Assumptions",id:"boolean-assumptions",level:4},{value:"Expectation-Based Reasoning",id:"expectation-based-reasoning",level:3},{value:"Assumptions and Assertions",id:"assumptions-and-assertions",level:3},{value:"Havoc",id:"havoc",level:3},{value:"Nondeterministic Choice",id:"nondeterministic-choice",level:3},{value:"Rewards",id:"rewards",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"guide-to-heyvl",children:"Guide to HeyVL"})}),"\n","\n",(0,t.jsxs)(n.p,{children:["After ",(0,t.jsx)(n.a,{href:"/docs/getting-started/installation",children:"installing Caesar"}),", we can start to use HeyVL with Caesar.\nIn this guide, we'll go through the basics of HeyVL and how verification problems can be encoded in it.\nWe'll use the ",(0,t.jsx)(n.em,{children:"lossy list"})," example from our ",(0,t.jsx)(n.a,{href:"/",children:"home page"})," to understand HeyVL.\nOn the next page, we present ",(0,t.jsx)(n.a,{href:"/docs/getting-started/zoo-of-heyvl-examples",children:"a collection of HeyVL examples"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"contents-of-this-guide",children:"Contents of this guide"}),"\n","\n",(0,t.jsx)(r.A,{toc:h}),"\n",(0,t.jsx)(n.h2,{id:"what-are-heyvl-and-caesar",children:"What are HeyVL and Caesar?"}),"\n",(0,t.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsxs)("figure",{style:{maxWidth:"400px",float:"right",width:"100%",border:"1px solid gray",padding:"1em",borderRadius:"5px"},children:[(0,t.jsx)("h3",{style:{textAlign:"center"},children:"Architecture of Caesar"}),(0,t.jsx)("img",{src:"/img/architecture-oopsla23.svg"})]}),"\n",(0,t.jsxs)(n.p,{children:["On the right, you can see the architecture of Caesar.\nCaesar is designed as a ",(0,t.jsx)(n.em,{children:"deductive verification infrastructure"})," for probabilistic programs."]}),"\n",(0,t.jsxs)(n.p,{children:["At the core is ",(0,t.jsx)(n.em,{children:"HeyVL"}),", our ",(0,t.jsx)(n.em,{children:"intermediate verification language"})," (IVL).\nAn IVL is used to encode a wide range of verification problems and verification techniques into a common language.\nIn contrast to normal programming languages, IVLs can feature statements such as ",(0,t.jsx)(n.code,{children:"assert"})," and ",(0,t.jsx)(n.code,{children:"assume"}),".\nIntuitively, ",(0,t.jsx)(n.code,{children:"assert"})," checks a condition and fails if it's not true.\n",(0,t.jsx)(n.code,{children:"assume"})," lets us make a logical assumption at arbitrary points in the program.\nThese can be used to encode proofs and proof rules into the IVL.\nHeyVL is a ",(0,t.jsx)(n.em,{children:"quantitative"})," IVL, meaning that its verification statements (",(0,t.jsx)(n.code,{children:"assert"}),", ",(0,t.jsx)(n.code,{children:"assume"}),", ",(0,t.jsx)(n.code,{children:"havoc"}),"...) do not only reason about Boolean statements (",(0,t.jsx)(n.code,{children:"x = 3"}),"), but rather about quantities such as expected values (",(0,t.jsx)(n.code,{children:"[x = 3] * 0.5"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"verification condition generator"})," (VC generator) takes a HeyVL program and converts it to ",(0,t.jsx)(n.em,{children:"verification conditions"}),", which is a logical formula in our quantative logic ",(0,t.jsx)(n.em,{children:"HeyLo"}),".\nThis formula specifies logically whether a HeyVL program verifies or not.\nFor example, ",(0,t.jsx)(n.code,{children:"assume [x = 3]; assert 0.5"})," is converted to the HeyLo formula ",(0,t.jsx)(n.code,{children:"[x = 3] \u2192 0.5"}),".\nWe will explain what this means later in this guide (see the section on ",(0,t.jsx)(n.a,{href:"#verification-statements",children:"verification statements"}),").\nAt the end, Caesar converts the HeyLo formula into a problem for an ",(0,t.jsx)(n.em,{children:"SMT solver"}),"; currently we use ",(0,t.jsx)(n.a,{href:"https://github.com/Z3Prover/z3",children:"Z3"}),".\nThis allows us to check whether a program verifies ",(0,t.jsx)(n.em,{children:"for all possible inputs"}),".\nIf verification fails, then the SMT solver can often return a counter-example, i.e. an input to the program so that the program does not verify."]}),"\n",(0,t.jsxs)(n.p,{children:["Caesar supports a number of proof rules out of the box (see ",(0,t.jsx)(n.a,{href:"../proof-rules/",children:"proof rules documentation"}),").\nFor example, reasoning about ",(0,t.jsx)(n.em,{children:"while loops"})," or recursion is done through proof rules.\nBy adding an annotation such as ",(0,t.jsx)(n.a,{href:"/docs/proof-rules/induction",children:(0,t.jsx)(n.code,{children:"@invariant"})})," to a while loop, you can instruct Caesar use the ",(0,t.jsx)(n.em,{children:"Park induction"})," proof rule.\nHowever, this will internally desugar into normal HeyVL code which means these proof rules are ",(0,t.jsx)(n.em,{children:"not"})," magic built-ins, but just a convenience in Caesar.\nThus, you can add your own proof rules with Caesar by encoding them in HeyVL.\nThat is the advantage of using an intermediate verification language such as HeyVL."]}),"\n",(0,t.jsx)("div",{style:{clear:"both"}}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The language HeyVL and the basics of Caesar are formally described in our ",(0,t.jsxs)(n.a,{href:"/docs/publications#oopsla-23",children:["OOPLSA '23 publication ",(0,t.jsx)(n.em,{children:'"A Deductive Verification Infrastructure for Probabilistic Programs"'})]})," (",(0,t.jsx)(n.a,{href:"https://arxiv.org/pdf/2309.07781.pdf",children:"direct link to extended version pdf"}),").\nThere, you can find rock-solid formal foundations for HeyVL and details on how to prove that HeyVL programs are ",(0,t.jsx)(n.em,{children:"correct"}),", i.e. actually encode the desired verification problems.\nWe highly recommend you take a look at it after reading this guide for a more rigorous treatment of HeyVL and Caesar.\nRefer to our ",(0,t.jsx)(n.a,{href:"/docs/publications#oopsla-23",children:"publications page"})," for more details."]})}),"\n",(0,t.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,t.jsx)(n.p,{children:"So, what can we do with HeyVL and Caesar right now?\nHere's an incomplete list of features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Prove correctness and find bugs in probabilistic programs.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"We have verified properties like lower and upper bounds on expected values, such as expected values on termination, expected runtimes, expected resource consumption, termination probabilities, and more."}),"\n",(0,t.jsx)(n.li,{children:"Using proof rules like Park induction, k-induction, rules for positive almost-sure and almost-sure termination, or the optional stopping theorem."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.em,{children:"HeyVL"}),", a ",(0,t.jsx)(n.em,{children:"quantitative"})," intermediate verification language that","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["has generalized quantitative verification statements ",(0,t.jsx)(n.code,{children:"assume"}),", ",(0,t.jsx)(n.code,{children:"assert"}),", ",(0,t.jsx)(n.code,{children:"havoc"}),", and nondeterministic choice,"]}),"\n",(0,t.jsxs)(n.li,{children:["features dual ",(0,t.jsx)(n.em,{children:"co"}),"-versions of verification statements to reason about ",(0,t.jsx)(n.em,{children:"upper bounds"})," of expected values (the non-",(0,t.jsx)(n.code,{children:"co"})," statements are used to reason about ",(0,t.jsx)(n.em,{children:"lower bounds"}),"),"]}),"\n",(0,t.jsx)(n.li,{children:"and through these allows you to encode new proof rules and use Caesar as a verifier for them."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Leverage the power of modern SMT solvers to logically reason about infinite-state probabilistic systems with infinitely many inputs and outputs, and unbounded loops and recursion."}),"\n",(0,t.jsx)(n.li,{children:"Compositionally reason about programs, building bigger verified programs out of smaller verified parts using procedures."}),"\n",(0,t.jsxs)(n.li,{children:["Define your own data types and define new functions in HeyVL, with support for ",(0,t.jsx)(n.em,{children:"uninterpreted"})," definitions, i.e. those defined by logical ",(0,t.jsx)(n.em,{children:"axioms"})," and thus may not even have an executable definition."]}),"\n",(0,t.jsxs)(n.li,{children:["Formally correct reasoning with theoretical guarantees. We do not use sampling algorithms such as ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo",children:"MCMC"}),", but instead use logical reasoning about programs."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"verifying-our-first-program-lossy-list-traversal",children:"Verifying Our First Program: Lossy List Traversal"}),"\n",(0,t.jsxs)(n.p,{children:["Let us now go through the lossy list example in detail and step-by-step.\nThe ",(0,t.jsx)(n.a,{href:"#full-example",children:"full example can be found below"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"the-probabilistic-program-itself",children:"The Probabilistic Program Itself"}),"\n",(0,t.jsxs)(n.p,{children:["Let us start with the probabilistic program itself, without any HeyVL annotations.\n",(0,t.jsx)(n.code,{children:"lossy_list"})," is a procedure that takes an input ",(0,t.jsx)(n.code,{children:"init_L"})," of type ",(0,t.jsx)(n.code,{children:"List"})," and returns an output list ",(0,t.jsx)(n.code,{children:"l"}),".\n",(0,t.jsx)(n.code,{children:"List"})," is a user-defined type ",(0,t.jsx)(n.a,{href:"#user-defined-datatypes-and-functions",children:"which we define below"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"proc lossy_list(init_l: List) -> (l: List)\n{\n    l = init_l\n    while len(l) > 0 {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice {\n            l = pop(l)\n        } else {\n            assert [false]\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The program is supposed to model a list traversal with a (rather alarming) 50% probability of memory faults during the traversal.\nFor this guide, we want to prove a lower bound to the probability of a successful traversal."}),"\n",(0,t.jsx)(n.h4,{id:"what-does-the-program-do",children:"What does the program do?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["We initialize the output ",(0,t.jsx)(n.code,{children:"l"})," to the input.\nNote that it's forbidden in HeyVL to modify input variables."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The main part of the code is the ",(0,t.jsx)(n.code,{children:"while"})," loop.\nIt runs as long as the list ",(0,t.jsx)(n.code,{children:"l"})," is not zero."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the loop body, we have our ",(0,t.jsx)(n.em,{children:"probabilistic statement"}),": The ",(0,t.jsx)(n.code,{children:"flip(0.5)"})," expression does a coin flip and returns ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),", each with probability ",(0,t.jsx)(n.code,{children:"0.5"}),".\nThe result is saved in a newly declared variable ",(0,t.jsx)(n.code,{children:"prob_choice"})," using the ",(0,t.jsx)(n.code,{children:"var"})," statement.\nWhen we declare a new variable in HeyVL, we always need to specify the type."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the coin flip resulted in ",(0,t.jsx)(n.code,{children:"true"}),", then we remove the first element of the top of the list using ",(0,t.jsx)(n.code,{children:"pop"}),".\nThe resulting list has a length that's one smaller than before."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the coin flip resulted in ",(0,t.jsx)(n.code,{children:"false"}),", then we simulate a memory fault using ",(0,t.jsx)(n.code,{children:"assert [false]"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)("small",{children:["Note: In HeyVL, while loops always need invariant annotations. Therefore, this program is not yet valid HeyVL code. We'll add the annotation ",(0,t.jsx)(a.A,{to:"#specifications",children:"when we talk about specifications"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["HeyVL does not have ",(0,t.jsx)(n.code,{children:"return"})," statements. Every value to be returned by the procedure must be declared as an output variable in the procedure declaration. Here, the output variable ",(0,t.jsx)(n.code,{children:"l"})," is automatically returned."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["There is more detailed documentation on HeyVL's ",(0,t.jsx)(n.a,{href:"/docs/heyvl/procs",children:"procedures"})," and ",(0,t.jsx)(n.a,{href:"/docs/heyvl/statements",children:"statements"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"what-do-we-want-to-verify",children:"What do we want to verify?"}),"\n",(0,t.jsx)(n.p,{children:"With Caesar, various properties of this program can be verified:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.strong,{children:["In this guide, we'll only verify that he probability of a successful run without crashing is at least ",(0,t.jsx)(n.code,{children:"0.5^len(init_l)"}),"."]})}),"\n",(0,t.jsx)(n.li,{children:"We could verify probabilities of crashing at specific list lengths."}),"\n",(0,t.jsx)(n.li,{children:"We could verify expected values of list lengths at crash time."}),"\n",(0,t.jsxs)(n.li,{children:["For the above, we can verify either ",(0,t.jsx)(n.em,{children:"lower"})," or ",(0,t.jsx)(n.em,{children:"upper bounds"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The program is ",(0,t.jsx)(n.em,{children:"certainly terminating"}),", i.e. each execution will always terminate in a finite number of steps.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["There are programs that only terminate with probability one, but may have a zero probability of not terminating. We call these programs ",(0,t.jsx)(n.em,{children:"almost-surely terminating"})," (",(0,t.jsx)(n.em,{children:"AST"})," for short)."]}),"\n",(0,t.jsxs)(n.li,{children:["There are programs which terminate with probability one, but do not have a finite expected runtime. Such programs are almost-surely terminating, but not ",(0,t.jsx)(n.em,{children:"positively almost-surely terminating"})," (",(0,t.jsx)(n.em,{children:"PAST"})," for short)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"... and many more."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"user-defined-datatypes-and-functions",children:"User-Defined Datatypes and Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Our probbabilistic program above is incomplete: it's still missing a specification and a loop invariant annotation.\nIn addition, the ",(0,t.jsx)(n.code,{children:"List"})," type and the ",(0,t.jsx)(n.code,{children:"exp"})," function need to be defined.\nThey are not built-in into HeyVL, but must be ",(0,t.jsx)(n.em,{children:"axiomatized"})," using user-defined domains and functions."]}),"\n",(0,t.jsxs)(n.p,{children:["How this works is that domains and functions are defined ",(0,t.jsx)(n.em,{children:"uninterpreted"}),", which means that they do not necessarily need to have a complete executable definition associated with them.\nDomains are simply new types which functions can map from and into.\nFunctions simply have input and output types."]}),"\n",(0,t.jsxs)(n.p,{children:["Then, ",(0,t.jsx)(n.em,{children:"axioms"})," define the knowledge that Caesar (and the underlying SMT solver) will receive about these uninterpreted domains and functions.\nFor the purpose of verification, we check all possible definitions which satisfy these axioms and ignore those that do not satisfy them."]}),"\n",(0,t.jsx)(n.h4,{id:"the-list-type",children:"The List Type"}),"\n",(0,t.jsxs)(n.p,{children:["Let's declare our list type, using the ",(0,t.jsxs)(n.a,{href:"/docs/stdlib/numbers#uint",children:["built-in ",(0,t.jsx)(n.code,{children:"UInt"})," type"]})," for nonnegative integers."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"domain List {\n    func len(l: List): UInt\n    func pop(l: List): List\n\n    axiom list_pop forall l: List. len(pop(l)) == len(l) - 1\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You will notice that we do not declare what a list consists or what size the data type should have.\nWe simply declare a domain ",(0,t.jsx)(n.code,{children:"List"})," and have two uninterpreted functions ",(0,t.jsx)(n.code,{children:"len"})," and ",(0,t.jsx)(n.code,{children:"pop"})," operating on this type.\nThey also don't have definitions, but only the axiom ",(0,t.jsx)(n.code,{children:"list_pop"})," that says the length will decrease by one if we run ",(0,t.jsx)(n.code,{children:"pop"})," on a list ",(0,t.jsx)(n.code,{children:"l"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["These uninterpreted definitions are part of the magic of deductive verification using SMT solving that Caesar does.\nWe can simply define new types and functions ",(0,t.jsx)(n.em,{children:"logically"})," via a (possibly partial) specification and verify with those.\nThis makes Caesar very extensible: new definitions do not need to be baked into Caesar itself, but can be defined by the user.\nThis makes axioms also extremely dangerous. Consider ",(0,t.jsx)(n.code,{children:"axiom my_wrong_axiom false"}),".\nBecause ",(0,t.jsx)(n.code,{children:"false"})," is never true for any interpretation, verification with this axiom will always succeed!"]}),"\n",(0,t.jsx)(n.h4,{id:"the-exponential-function",children:"The Exponential Function"}),"\n",(0,t.jsxs)(n.p,{children:["Remember that we want to prove a lower bound of ",(0,t.jsx)(n.code,{children:"0.5^len(init_l)"})," for the probability of a run without crashing.\nExponential functions are also not included in Caesar, but it can also be easily added."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"domain Exponentials {\n    func exp(base: UReal, exponent: UInt): UReal\n\n    axiom exp_base forall base: UReal. exp(base, 0) == 1\n    axiom exp_step forall base: UReal, exponent: UInt. exp(base, exponent + 1) == base * exp(base, exponent)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We declare a domain ",(0,t.jsx)(n.code,{children:"Exponentials"}),".\nThe new type ",(0,t.jsx)(n.code,{children:"Exponentials"})," is not used, but all function definitions and axioms need a surrounding ",(0,t.jsx)(n.code,{children:"domain"}),".\nThe function ",(0,t.jsx)(n.code,{children:"exp"})," takes a base and an exponent of type ",(0,t.jsx)(n.code,{children:"UReal"})," and ",(0,t.jsx)(n.code,{children:"UInt"}),", respectively.\nSee the ",(0,t.jsx)(n.a,{href:"/docs/stdlib/numbers",children:"number types docs"})," for more information."]}),"\n",(0,t.jsxs)(n.p,{children:["There are two axioms for ",(0,t.jsx)(n.code,{children:"exp"}),".\nThe first, ",(0,t.jsx)(n.code,{children:"exp_base"})," specifies that ",(0,t.jsx)(n.code,{children:"exp(base, 0) == 1"})," holds for all ",(0,t.jsx)(n.code,{children:"base"})," values.\nThe second, ",(0,t.jsx)(n.code,{children:"exp_step"})," specifies the successive cases, ",(0,t.jsx)(n.code,{children:"exp(base, exponent + 1) == base * exp(base, exponent)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You might wonder why we specify the exponential function in this inductive way and not via the ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Characterizations_of_the_exponential_function",children:"many other definitions of the exponential function that Wikipedia provides"}),".\nAfter all, we are not restricted to inductively computable definitions and can use any logical specification we want, right?\nThe answer here is that those two axioms are precisely the ones needed to prove our specific property using our chosen proof rule of ",(0,t.jsx)(n.a,{href:"/docs/proof-rules/induction",children:"Park induction"}),".\nWe'll see this below.\nIn general, what axioms you need to provide for verification is often specific to the verification task at hand."]}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"/docs/heyvl/domains",children:"documentation on domains and functions"})," for more information."]}),"\n",(0,t.jsx)(n.h3,{id:"specifications-and-invariants",children:"Specifications and Invariants"}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have provided all necessary definitions for the program, let us write the specification.\nRemember that we want to verify that the probability of a successful run without crashing is at least ",(0,t.jsx)(n.code,{children:"exp(0.5, len(init_l))"}),".\nHow do we specify such a property in HeyVL?"]}),"\n",(0,t.jsxs)(n.p,{children:["HeyVL uses ",(0,t.jsx)(n.em,{children:"expectation-based reasoning"}),", which is a kind of deductive reasoning that talks about expected values of random variables.\nWe describe the full theoretical details in our ",(0,t.jsx)(n.a,{href:"/docs/publications#oopsla-23",children:"OOPSLA '23 publication"}),".\nFor now though, we'll provide some intuition."]}),"\n",(0,t.jsx)(n.h4,{id:"specifications",children:"Specifications"}),"\n",(0,t.jsxs)(n.p,{children:["We extend our ",(0,t.jsx)(n.code,{children:"lossy_list"})," declaration as follows with a ",(0,t.jsx)(n.code,{children:"pre"})," and a ",(0,t.jsx)(n.code,{children:"post"})," attribute:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"proc lossy_list(init_l: List) -> (l: List)\n    pre [len(init_l) == 1] * 0.5\n    post [true]\n{ ... }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["What does this mean?\nExpectation-based reasoning always works backwards through the program.\nAccordingly, we start our interpretation with the ",(0,t.jsx)(n.code,{children:"post"}),".\nThe procedure having the post ",(0,t.jsx)(n.code,{children:"[true]"})," means that we are ultimately interested in reasoning about the ",(0,t.jsxs)(n.em,{children:["expected value of ",(0,t.jsx)(n.code,{children:"[true]"})," at termination"]}),".\nThe Iverson bracket notation ",(0,t.jsx)(n.code,{children:"[b]"})," maps a Boolean expression ",(0,t.jsx)(n.code,{children:"b"})," to ",(0,t.jsx)(n.code,{children:"1"})," if ",(0,t.jsx)(n.code,{children:"b"})," evaluates to ",(0,t.jsx)(n.code,{children:"true"})," and to ",(0,t.jsx)(n.code,{children:"0"})," otherwise.\nTherefore, ",(0,t.jsx)(n.code,{children:"[true]"})," is equivalent to ",(0,t.jsx)(n.code,{children:"1"}),".\nIt follows that ",(0,t.jsx)(n.code,{children:"post [true]"})," means we are interested simply in the probability of successful termination."]}),"\n",(0,t.jsxs)(n.p,{children:["The pre ",(0,t.jsx)(n.code,{children:"[len(init_l) == 1] * 0.5"})," is a bit more interesting.\nIt results in a ",(0,t.jsx)(n.em,{children:"proof obligation"})," for Caesar: the verifier now needs to show that ",(0,t.jsx)(n.em,{children:"the pre is always a lower bound to the expected value of the post"}),".\nThe pre evaluates to ",(0,t.jsx)(n.code,{children:"0.5"})," in case the length of the list is exactly one and to zero otherwise.\nSince the pre is checked as a lower bound (and expected values are nonnegative in HeyVL), Caesar in effect only checks that ",(0,t.jsx)(n.code,{children:"0.5"})," is a lower bound for inputs with list length equal to one."]}),"\n",(0,t.jsxs)(n.p,{children:["Of course, we can also change the pre so that Caesar has to check infinitely many inputs, e.g. by changing the pre to ",(0,t.jsx)(n.code,{children:"[len(init_l) != 1] * exp(0.5, len(init_l))"}),".\nThanks to the magic of deductive reasoning and SMT solvers, this will also work instantly."]}),"\n",(0,t.jsx)(n.h4,{id:"invariants",children:"Invariants and Other Proof Rules"}),"\n",(0,t.jsxs)(n.p,{children:["Verification of programs with loops might require reasoning about an unbounded, possibly infinite number of loop iterations.\nIn deductive verification, we reduce reasoning of programs with loops to HeyVL programs without loops.\nThis is done using various ",(0,t.jsx)(n.em,{children:"proof rules"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In the non-probabilistic setting, the most famous one is the ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Hoare_logic#While_rule",children:"proof rule from Hoare logic (for partial correctness)"})," which says that if we have an ",(0,t.jsx)(n.em,{children:"invariant"})," for a loop, i.e. a formula that holds before the loop and is maintained during the loop body's execution, then we may conclude that the invariant holds after the loop as well.\nThere is a direct correspondence to this rule in the probabilistic setting.\nWe call this rule ",(0,t.jsx)(n.a,{href:"/docs/proof-rules/induction",children:"Park induction"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To prove the desired pre being a lower bound on the expected value, we need find a ",(0,t.jsx)(n.em,{children:"probabilistic invariant"})," ",(0,t.jsx)(n.code,{children:"I"}),", i.e. an expression that computes an expected value for every program state, such that"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If the loop condition is true, then ",(0,t.jsx)(n.code,{children:"I"})," must be a lower bound to the expected value of ",(0,t.jsx)(n.code,{children:"I"})," itself at the end of each single loop iteration,"]}),"\n",(0,t.jsxs)(n.li,{children:["If the loop condition is false, then ",(0,t.jsx)(n.code,{children:"I"})," must be a lower bound to the post (in this case it's ",(0,t.jsx)(n.code,{children:"[true] = 1"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Note: There is a more formal description on the ",(0,t.jsx)(a.A,{to:"../proof-rules/induction",children:"documentation page for the Park induction proof rule"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This proof rule corresponds to the general proof method of mathematical induction.\nThe base case is (2) when the loop condition is false and the inductive case is (1) when the loop condition is true, where we only reason about a single loop iteration."}),"\n",(0,t.jsxs)(n.p,{children:["So what is a valid invariant for our program?\nIt turns out that ",(0,t.jsx)(n.code,{children:"exp(0.5, len(l))"})," is a valid invariant:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If the loop condition is true, then the expected value of ",(0,t.jsx)(n.code,{children:"exp(0.5, len(l))"})," at the end of the loop iteration is exactly ",(0,t.jsx)(n.code,{children:"I"}),"! Here's the calculation:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"  0.5 * exp(0.5, len(pop(l))) + 0.5 * 0\n= 0.5 * exp(0.5, len(pop(l)))            (simplify)\n= 0.5 * exp(0.5, len(l)-1)               (list_pop axiom)\n= exp(0.5, len(l))                       (exp_step axiom)\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If the loop condition is false, then ",(0,t.jsx)(n.code,{children:"I"})," is ",(0,t.jsx)(n.code,{children:"exp(0.5, 0)"})," which is equivalent to ",(0,t.jsx)(n.code,{children:"1"})," by the ",(0,t.jsx)(n.code,{children:"exp_base"})," axiom."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Caesar has built-in support for Park induction with the ",(0,t.jsxs)(n.a,{href:"/docs/proof-rules/induction",children:[(0,t.jsx)(n.code,{children:"@invariant"})," annotation for loops"]}),".\nWe add it on top of a loop statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"@invariant(exp(0.5, len(l)))\nwhile len(l) > 0 { ... }\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is all we needed to do before we can verify this program.\nBefore we do so, a warning."}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["HeyVL is an intermediate verification language and proof rules like Park induction must only be applied where it is sound with respect to the language semantics that we are considering.\nIn this case, by using Park induction in a ",(0,t.jsx)(n.code,{children:"proc"}),", we implicitly assumed ",(0,t.jsx)(n.em,{children:"greatest fixed point"})," semantics on unbounded non-negative expected values for the loop.\nIt assigns an infinite expected value to nonterminating executions.\nThen, Park induction is sound for lower bound reasoning only."]}),(0,t.jsxs)(n.p,{children:["A more common choice is ",(0,t.jsx)(n.em,{children:"least fixed point"})," semantics for loops, which assigns zero to nonterminating executions.\nThere, Park induction is sound only for ",(0,t.jsx)(n.em,{children:"upper bound reasoning"})," (",(0,t.jsx)(n.a,{href:"#upper-bounds",children:"see below"}),")."]}),(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"../proof-rules/",children:"proof rules documentation"})," for more information on soundness of proof rules."]})]}),"\n",(0,t.jsx)(n.h3,{id:"full-example",children:"Running the Complete Example"}),"\n",(0,t.jsxs)(n.p,{children:["We can now run Caesar on the full example file.\nThis file is also available in the ",(0,t.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar",children:"Github repository"})," at ",(0,t.jsx)(n.code,{children:"tests/domains/lossy_list.heyvl"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"domain Exponentials {\n    func exp(base: UReal, exponent: UInt): UReal\n\n    axiom exp_base forall base: UReal. exp(base, 0) == 1\n    axiom exp_step forall base: UReal, exponent: UInt. exp(base, exponent + 1) == base * exp(base, exponent)\n}\n\ndomain List {\n    func len(l: List): UInt\n    func pop(l: List): List\n\n    axiom list_pop forall l: List. len(pop(l)) == len(l) - 1\n}\n\nproc lossy_list(init_l: List) -> (l: List)\n    pre [len(init_l) == 1] * 0.5\n    post [true]\n{\n    l = init_l\n    @invariant(exp(0.5, len(l)))\n    while len(l) > 0 {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice {\n            l = pop(l)\n        } else {\n            assert [false]\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"To verify this example using Caesar, simply run the following command in the Caesar source directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"caesar verify tests/domains/lossy_list.heyvl\n"})}),"\n",(0,t.jsx)(n.h3,{id:"upper-bounds",children:"Reasoning About Upper Bounds (Coprocedures)"}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we are reasoning about ",(0,t.jsx)(n.em,{children:"lower bounds"})," of expected values.\nIn classical non-probabilistic deductive verification, reasoning about lower bounds of truth values is the default and sufficient for most tasks (the recent interest in ",(0,t.jsx)(n.em,{children:"incorrectness logics"})," being a trend to the opposite).\nIn probabilistic, expectation-based reasoning though, it is just as natural to reason about upper bounds of expected values as about lower bounds.\nFor example, we'd like to prove an upper bound to the probability of a crash. ",(0,t.jsx)("small",{children:"This is not simply the opposite probability to the probability of a successful run when we also distinguish nontermination from crashes (we do!)."})]}),"\n",(0,t.jsxs)(n.p,{children:["HeyVL supports reasoning about upper bounds as well, via its ",(0,t.jsx)(n.code,{children:"coproc"}),"s.\nA ",(0,t.jsx)(n.code,{children:"coproc"})," is just like a ",(0,t.jsx)(n.code,{children:"proc"}),", but the ",(0,t.jsx)(n.code,{children:"pre"})," annotation is interpreted differently.\nInstead of noting a ",(0,t.jsx)(n.em,{children:"lower bound"})," on the expected value of the post, it now denotes an ",(0,t.jsx)(n.em,{children:"upper bound"})," of the post.\nThe ",(0,t.jsx)(n.code,{children:"co"})," prefix indicates that the declaration is dual (in a mathematical sense) to the ",(0,t.jsx)(n.code,{children:"proc"})," one.\nHeyVL also has dual ",(0,t.jsx)(n.code,{children:"co"}),"-versions of its ",(0,t.jsx)(n.a,{href:"#verification-statements",children:"verification statements"}),", which will be introduced later."]}),"\n",(0,t.jsxs)(n.p,{children:["Consider the following ",(0,t.jsx)(n.code,{children:"coproc"})," example (with the domain declarations from above omitted):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"coproc lossy_list_up(init_l: List) -> (l: List)\n    pre 0\n    post len(l)\n{\n    l = init_l\n    @invariant(exp(0.5, len(l)))\n    while len(l) > 0 {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice {\n            l = pop(l)\n        } else {\n            assert [false]\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we prove an upper bound of zero to the expected value of ",(0,t.jsx)(n.code,{children:"len(l)"})," on termination.\nFor simplicity, we'll use ",(0,t.jsx)(n.a,{href:"/docs/proof-rules/induction",children:"Park induction"})," again."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["We are now using Park induction with upper bounds, which means the proof rule only gives us an upper bound to the ",(0,t.jsx)(n.em,{children:"least fixed point"})," of the loop semantics.\nBefore, we reasoned about greatest fixed point semantics!"]}),(0,t.jsxs)(n.p,{children:["As we've said above, the least fixed point semantics assigns expected value ",(0,t.jsx)(n.strong,{children:"zero"})," to nonterminating runs (as opposed to ",(0,t.jsx)(n.strong,{children:"infinity"})," for greatest fixed point semantics).\nThus, now we are only proving an upper bound on the expected value of ",(0,t.jsx)(n.code,{children:"len(l)"})," ",(0,t.jsx)(n.em,{children:"only for the terminating executions AND those which do not crash"}),".\nIf we hit the ",(0,t.jsx)(n.code,{children:"assert [false]"})," statement, then the expected value will be zero and those executions will verify trivially since HeyVL's expected values are always nonnegative."]}),(0,t.jsxs)(n.p,{children:["Caesar has other proof rules built-in that allow reasoning about lower bounds of least fixed points and upper bounds of greatest fixed points.\nSee the ",(0,t.jsx)(n.a,{href:"../proof-rules/",children:"proof rules documentation"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"verification-statements",children:"Verification Statements"}),"\n",(0,t.jsxs)(n.p,{children:['In addition to HeyVL\'s "normal" programming constructs such as assignments ',(0,t.jsx)(n.code,{children:"x = e"}),", ",(0,t.jsx)(n.code,{children:"if (b) { ... } else { ... }"}),", Caesar has statements that are specific to program verification.\nThere are ",(0,t.jsx)(n.code,{children:"assert"})," statements which add proof obligations, ",(0,t.jsx)(n.code,{children:"assume"})," statements which allow to add assumptions, and nondeterministic choices."]}),"\n",(0,t.jsxs)(n.p,{children:["In the following, we'll explain HeyVL's verification statements by explaining how the ",(0,t.jsx)(n.a,{href:"#full-example",children:"lossy list example"})," is internally rewritten to loop-free HeyVL code with verification statements.\nFor reference-level documentation, refer to the ",(0,t.jsx)(n.a,{href:"/docs/heyvl/statements",children:"HeyVL statements documentation"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Our ",(0,t.jsxs)(n.a,{href:"/docs/publications#oopsla-23",children:["OOPLSA '23 publication ",(0,t.jsx)(n.em,{children:'"A Deductive Verification Infrastructure for Probabilistic Programs"'})]})," (",(0,t.jsx)(n.a,{href:"https://arxiv.org/pdf/2309.07781.pdf",children:"direct link to extended version pdf"}),") is a formal treatment of HeyVL's verification statements.\nIt is a highly recommended read to understand HeyVL's verification statements in detail and from the bottom up."]})}),"\n",(0,t.jsx)(n.h3,{id:"boolean-verification-statements",children:"Boolean Verification Statements"}),"\n",(0,t.jsxs)(n.p,{children:["HeyVL's verification statements are quantitative generalizations of classical verification statements that can be found in deductive verifiers such as ",(0,t.jsx)(n.a,{href:"https://dafny.org/",children:"Dafny"}),".\nThis means that when we only reason about Boolean properties, i.e. whether a property holds in certain states or not (as opposed to expected values of such predicates), then HeyVL's verification statements behave ",(0,t.jsx)(n.em,{children:"exactly"})," as their qualitative (Boolean) counterparts.\nThis is why we'll start our explanation with non-probabilistic intuition before we delve into more detail about ",(0,t.jsx)(n.a,{href:"#expectation-based-reasoning",children:(0,t.jsx)(n.em,{children:"expectation-based reasoning"})}),", the generalization to the quantitative setting."]}),"\n",(0,t.jsx)(n.h4,{id:"embed-expressions",children:"Embed Expressions"}),"\n",(0,t.jsxs)(n.p,{children:["An embed ",(0,t.jsx)(n.a,{href:"/docs/heyvl/expressions",children:"expression"})," ",(0,t.jsx)(n.code,{children:"?(b)"})," takes a Boolean expression ",(0,t.jsx)(n.code,{children:"b"})," and maps it to ",(0,t.jsx)(n.code,{children:"\u221e"})," if ",(0,t.jsx)(n.code,{children:"b"})," evaluates to ",(0,t.jsx)(n.code,{children:"true"})," and to ",(0,t.jsx)(n.code,{children:"0"})," otherwise.\nIt can be expressed by Iverson brackets ",(0,t.jsx)(n.code,{children:"[b]"})," via ",(0,t.jsx)(n.code,{children:"[b] * \u221e"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Thus, embed expressions ",(0,t.jsx)(n.em,{children:"embed"})," Boolean expressions into the quantitative verification domain that Caesar uses where values are not just ",(0,t.jsx)(n.code,{children:"false"})," and ",(0,t.jsx)(n.code,{children:"true"}),", but everything from the real number ",(0,t.jsx)(n.code,{children:"0"})," up to and including ",(0,t.jsx)(n.code,{children:"\u221e"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"boolean-assertions",children:"Boolean Assertions"}),"\n",(0,t.jsx)(n.p,{children:"A Boolean assertion is used to say that a predicate is true at this location.\nFor example,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"assert ?(len(init_l) > 0)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["will require that ",(0,t.jsx)(n.code,{children:"len(init_l)"})," is at least one."]}),"\n",(0,t.jsx)(n.h4,{id:"boolean-assumptions",children:"Boolean Assumptions"}),"\n",(0,t.jsx)(n.p,{children:"A Boolean assumption is used to instruct the verifier that a Boolean expression can be assumed to be true at this point without proof.\nFor example,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"assume ?(len(init_l) == 1)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["will assume that ",(0,t.jsx)(n.code,{children:"len(init_l)"})," is one.\nExecutions that do not satisfy the Boolean expression are ignored by the verifier."]}),"\n",(0,t.jsx)(n.p,{children:"For example, consider this piece of code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"assume ?(len(init_l) == 1); assert ?(len(init_l) > 0)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The assertion will never fail since we assume in all executions that the assertion ",(0,t.jsx)(n.code,{children:"len(init_l) == 1"})," is true and thus also ",(0,t.jsx)(n.code,{children:"len(init_l) > 0"})," holds."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that ",(0,t.jsx)(n.code,{children:"assume ?(false)"})," will assume ",(0,t.jsx)(n.code,{children:"false"}),", i.e. everything following after this statement will verify."]}),"\n",(0,t.jsx)(n.h3,{id:"expectation-based-reasoning",children:"Expectation-Based Reasoning"}),"\n",(0,t.jsx)(n.h3,{id:"assumptions-and-assertions",children:"Assumptions and Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"havoc",children:"Havoc"}),"\n",(0,t.jsx)(n.h3,{id:"nondeterministic-choice",children:"Nondeterministic Choice"}),"\n",(0,t.jsx)(n.h3,{id:"rewards",children:"Rewards"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},4252:(e,n,i)=>{i.d(n,{A:()=>a});i(6540);var s=i(5195);const t={tableOfContentsInline:"tableOfContentsInline_prmo"};var o=i(4848);function a(e){let{toc:n,minHeadingLevel:i,maxHeadingLevel:a}=e;return(0,o.jsx)("div",{className:t.tableOfContentsInline,children:(0,o.jsx)(s.A,{toc:n,minHeadingLevel:i,maxHeadingLevel:a,className:"table-of-contents",linkClassName:null})})}},5195:(e,n,i)=>{i.d(n,{A:()=>f});var s=i(6540),t=i(6342);function o(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),i=Array(7).fill(-1);n.forEach(((e,n)=>{const s=i.slice(2,e.level);e.parentIndex=Math.max(...s),i[e.level]=n}));const s=[];return n.forEach((e=>{const{parentIndex:i,...t}=e;i>=0?n[i].children.push(t):s.push(t)})),s}function a(e){let{toc:n,minHeadingLevel:i,maxHeadingLevel:s}=e;return n.flatMap((e=>{const n=a({toc:e.children,minHeadingLevel:i,maxHeadingLevel:s});return function(e){return e.level>=i&&e.level<=s}(e)?[{...e,children:n}]:n}))}function r(e){const n=e.getBoundingClientRect();return n.top===n.bottom?r(e.parentNode):n}function l(e,n){let{anchorTopOffset:i}=n;const s=e.find((e=>r(e).top>=i));if(s){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(r(s))?s:e[e.indexOf(s)-1]??null}return e[e.length-1]??null}function d(){const e=(0,s.useRef)(0),{navbar:{hideOnScroll:n}}=(0,t.p)();return(0,s.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function c(e){const n=(0,s.useRef)(void 0),i=d();(0,s.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:s,linkActiveClassName:t,minHeadingLevel:o,maxHeadingLevel:a}=e;function r(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(s),r=function(e){let{minHeadingLevel:n,maxHeadingLevel:i}=e;const s=[];for(let t=n;t<=i;t+=1)s.push(`h${t}.anchor`);return Array.from(document.querySelectorAll(s.join()))}({minHeadingLevel:o,maxHeadingLevel:a}),d=l(r,{anchorTopOffset:i.current}),c=e.find((e=>d&&d.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,i){i?(n.current&&n.current!==e&&n.current.classList.remove(t),e.classList.add(t),n.current=e):e.classList.remove(t)}(e,e===c)}))}return document.addEventListener("scroll",r),document.addEventListener("resize",r),r(),()=>{document.removeEventListener("scroll",r),document.removeEventListener("resize",r)}}),[e,i])}var h=i(8774),u=i(4848);function p(e){let{toc:n,className:i,linkClassName:s,isChild:t}=e;return n.length?(0,u.jsx)("ul",{className:t?void 0:i,children:n.map((e=>(0,u.jsxs)("li",{children:[(0,u.jsx)(h.A,{to:`#${e.id}`,className:s??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,u.jsx)(p,{isChild:!0,toc:e.children,className:i,linkClassName:s})]},e.id)))}):null}const x=s.memo(p);function f(e){let{toc:n,className:i="table-of-contents table-of-contents__left-border",linkClassName:r="table-of-contents__link",linkActiveClassName:l,minHeadingLevel:d,maxHeadingLevel:h,...p}=e;const f=(0,t.p)(),m=d??f.tableOfContents.minHeadingLevel,j=h??f.tableOfContents.maxHeadingLevel,v=function(e){let{toc:n,minHeadingLevel:i,maxHeadingLevel:t}=e;return(0,s.useMemo)((()=>a({toc:o(n),minHeadingLevel:i,maxHeadingLevel:t})),[n,i,t])}({toc:n,minHeadingLevel:m,maxHeadingLevel:j});return c((0,s.useMemo)((()=>{if(r&&l)return{linkClassName:r,linkActiveClassName:l,minHeadingLevel:m,maxHeadingLevel:j}}),[r,l,m,j])),(0,u.jsx)(x,{toc:v,className:i,linkClassName:r,...p})}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);