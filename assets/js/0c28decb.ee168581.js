"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[867],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={description:"Domain blocks are used to create user-defined types and uninterpreted functions.",sidebar_position:4},i="Domains, Uninterpreted Functions, and Axioms",s={unversionedId:"heyvl/domains",id:"heyvl/domains",title:"Domains, Uninterpreted Functions, and Axioms",description:"Domain blocks are used to create user-defined types and uninterpreted functions.",source:"@site/docs/heyvl/domains.md",sourceDirName:"heyvl",slug:"/heyvl/domains",permalink:"/docs/heyvl/domains",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/heyvl/domains.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Domain blocks are used to create user-defined types and uninterpreted functions.",sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Expressions",permalink:"/docs/heyvl/expressions"},next:{title:"Standard Library",permalink:"/docs/stdlib/"}},p={},l=[{value:"Example: Exponentials of \xbd",id:"example-exponentials-of-",level:2},{value:"Pure Functions",id:"pure-functions",level:2},{value:"Unsoundness From Axioms",id:"unsoundness-from-axioms",level:2}],u={toc:l},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"domains-uninterpreted-functions-and-axioms"},"Domains, Uninterpreted Functions, and Axioms"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"domain")," blocks are used to create user-defined types and uninterpreted functions.\nA domain has a name which can be used as a type in HeyVL code.\nThe domain block contains a list of functions and axioms defined on this domain."),(0,a.kt)("p",null,"Every domain type supports the binary operators ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"!="),".\nAll other operations must be encoded using functions and axioms."),(0,a.kt)("p",null,"Note that axioms with quantifiers quickly introduce ",(0,a.kt)("em",{parentName:"p"},"incompleteness")," of Caesar, making it unable to prove or disprove verification.\nRead the documentation section on ",(0,a.kt)("a",{parentName:"p",href:"/docs/heyvl/expressions#incompleteness"},"SMT Theories and Incompletness")," for more information."),(0,a.kt)("h2",{id:"example-exponentials-of-"},"Example: Exponentials of \xbd"),(0,a.kt)("p",null,"HeyVL does not support exponentiation expressions natively.\nBut we can define an uninterpreted function ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp")," and add axioms that specify its result.\n",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp(n)")," should evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"(\xbd)\u207f"),", so we add two axioms that define this exponential recursively."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp_base")," states that ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp(0) == 1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp_step")," ensures that ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp(exponent + 1) == 0.5 * ohfive_exp(exponent)")," holds.\nThis is sufficient to axiomatize our exponential function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"domain Exponentials {\n    func ohfive_exp(exponent: UInt): EUReal\n\n    axiom ohfive_exp_base ohfive_exp(0) == 1\n    axiom ohfive_exp_step forall exponent: UInt. ohfive_exp(exponent + 1) == 0.5 * ohfive_exp(exponent)\n}\n")),(0,a.kt)("p",null,"Note that this domain declaration creates a new type ",(0,a.kt)("inlineCode",{parentName:"p"},"Exponentials"),", but we do not use it."),(0,a.kt)("p",null,"We can check that ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp(3)")," evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"0.125")," by declaring a ",(0,a.kt)("a",{parentName:"p",href:"/docs/heyvl/procs"},"procedure")," with pre-condition ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," and post-condition ",(0,a.kt)("inlineCode",{parentName:"p"},"ohfive_exp(3) == 0.125"),".\nThis procedure verifies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"proc ohfive_3() -> ()\n    pre ?(true)\n    post ?(ohfive_exp(3) == 0.125)\n{}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Do not forget the ",(0,a.kt)("em",{parentName:"strong"},"empty")," block of statements ",(0,a.kt)("inlineCode",{parentName:"strong"},"{}")," at the end!"),"\nIf you omit it, Caesar will not attempt to verify the procedure and thus will not check the specification."),(0,a.kt)("h2",{id:"pure-functions"},"Pure Functions"),(0,a.kt)("p",null,"You can also declare ",(0,a.kt)("em",{parentName:"p"},"pure")," or ",(0,a.kt)("em",{parentName:"p"},"interpreted")," functions.\nThese are defined by a single expression that computes the result of the function."),(0,a.kt)("p",null,"The following function declaration has a such a definition (",(0,a.kt)("inlineCode",{parentName:"p"},"= x + 1"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"func plus_one(x: UInt): UInt = x + 1\n")),(0,a.kt)("p",null,"This syntax is just syntactic sugar for a function declaration with an additional axiom, i.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"func plus_one(x: UInt): UInt\naxiom plus_one_def forall x: UInt. plus_one(x) == x + 1\n")),(0,a.kt)("h2",{id:"unsoundness-from-axioms"},"Unsoundness From Axioms"),(0,a.kt)("p",null,"Axioms are a dangerous feature because they can make verification unsound."),(0,a.kt)("p",null,"An easy example is this one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"domain Unsound {\n    axiom unsound false\n}\n\nproc wrong() -> ()\n    pre ?(true)\n    post ?(true)\n{\n    assert ?(false)\n}\n")),(0,a.kt)("p",null,"The axiom ",(0,a.kt)("inlineCode",{parentName:"p"},"unsound")," always evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nBut for verification, Caesar assumes the axioms hold for all program states.\nIn other words, Caesar only verifies the program states in which the axioms evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nThus, Caesar does not verify any program state and the procedure ",(0,a.kt)("inlineCode",{parentName:"p"},"wrong")," incorrectly verifies!"))}c.isMDXComponent=!0}}]);