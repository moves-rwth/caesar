"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[8741],{8363:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"OOPSLA_AEC","title":"OOPSLA \'23 Artifact Evaluation Guide","description":"Welcome to the artifact for our OOPSLA \'23 submission \\"A Deductive Verification Infrastructure for Probabilistic Programs\\".","source":"@site/docs/OOPSLA_AEC.md","sourceDirName":".","slug":"/OOPSLA_AEC","permalink":"/docs/OOPSLA_AEC","draft":false,"unlisted":false,"editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/docs/OOPSLA_AEC.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"docsSidebar","previous":{"title":"Publications","permalink":"/docs/publications"},"next":{"title":"pgcl2heyvl Frontend","permalink":"/docs/pgcl"}}');var s=i(4848),c=i(8453);const o={sidebar_position:10},t="OOPSLA '23 Artifact Evaluation Guide",l={},a=[{value:"Contents",id:"contents",level:2},{value:"1. Getting Started",id:"1-getting-started",level:2},{value:"2. Piece by Piece: How Our Artifact Supports the Paper&#39;s Claims",id:"2-piece-by-piece-how-our-artifact-supports-the-papers-claims",level:2},{value:"2.1. Running Our Benchmarks",id:"21-running-our-benchmarks",level:3},{value:"2.2. The Caesar Tool and Its Source Code",id:"22-the-caesar-tool-and-its-source-code",level:3},{value:"2.3. pgcl2heyvl: Generating HeyVL Files From pGCL",id:"23-pgcl2heyvl-generating-heyvl-files-from-pgcl",level:3},{value:"3.1. From pGCL to HeyVL",id:"31-from-pgcl-to-heyvl",level:2},{value:"3.2. Verifying HeyVL Files With Caesar",id:"32-verifying-heyvl-files-with-caesar",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"oopsla-23-artifact-evaluation-guide",children:"OOPSLA '23 Artifact Evaluation Guide"})}),"\n",(0,s.jsxs)(n.p,{children:["Welcome to the artifact for our OOPSLA '23 submission ",(0,s.jsx)(n.em,{children:'"A Deductive Verification Infrastructure for Probabilistic Programs"'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Contained within the artifact:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Our tool ",(0,s.jsx)(n.em,{children:"Caesar"}),", which parses HeyVL programs and tries to verify them. Caesar constitutes our main implementation contribution and is the focus of this artifact.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A script to reproduce our benchmarks (Table 2)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["We also include our prototypical tool ",(0,s.jsx)(n.em,{children:"pgcl2heyvl"}),", which takes pGCL programs with annotations and produces a HeyVL file that encodes the required proof obligations."]}),"\n",(0,s.jsx)(n.li,{children:"Our full source code is contained within the artifact as well."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"contents",children:"Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Getting Started"}),"\n",(0,s.jsxs)(n.li,{children:["Piece by Piece: How Our Artifact Supports the Paper's Claims","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Running Our Benchmarks"}),"\n",(0,s.jsx)(n.li,{children:"The Caesar Tool and Its Source Code"}),"\n",(0,s.jsx)(n.li,{children:"pgcl2heyvl: Generating HeyVL Files From pGCL"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"A Guide to Custom Examples"}),"\n",(0,s.jsx)(n.li,{children:"Appendix: Accepted pGCL Syntax by the pglc2heyvl Tool"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"1-getting-started",children:"1. Getting Started"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requirements."})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We use ",(0,s.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"}),", and provide images for both x86 and ARM architectures."]}),"\n",(0,s.jsx)(n.li,{children:"16 GB of RAM, enough disk space for the artifact."}),"\n",(0,s.jsx)(n.li,{children:"Our benchmark set should terminate in under 10 minutes."}),"\n",(0,s.jsx)(n.li,{children:"Note: We provide an x86 Docker image. On ARM machines, Docker will run it in a virtual machine and will print a warning. In these setups, we have observed a slowdown of about 10x."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Downloading the artifact."}),"\nEither ",(0,s.jsx)(n.a,{href:"https://zenodo.org/record/8146987",children:"download from Zenodo"})," and then run ",(0,s.jsx)(n.code,{children:"docker image load -i caesar.tar.gz"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, ",(0,s.jsx)(n.a,{href:"https://github.com/Philipp15b/caesar/pkgs/container/caesar",children:"via Github packages"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker pull ghcr.io/philipp15b/caesar:oopsla23-aec --platform linux/amd64\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Entering the artifact environment."}),"\nSimply run the ",(0,s.jsx)(n.code,{children:"caesar"})," image with Docker.\nThis will open a ",(0,s.jsx)(n.code,{children:"bash"})," shell in the ",(0,s.jsx)(n.code,{children:"/root/caesar"})," directory with the ",(0,s.jsx)(n.code,{children:"caesar"})," and ",(0,s.jsx)(n.code,{children:"pgcl2heyvl"})," commands available."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run -it ghcr.io/philipp15b/caesar:oopsla23-aec\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The image is based on on Debian Bullseye (slim), so the ",(0,s.jsx)(n.code,{children:"apt"})," package manager is available.\nThe editors ",(0,s.jsx)(n.code,{children:"vim"})," and ",(0,s.jsx)(n.code,{children:"nano"})," are installed already."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Running the benchmarks."}),"\nTo reproduce our benchmarks (Table 2), execute"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fish run-benchmarks.fish\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The script will run the list of benchmarks specified in ",(0,s.jsx)(n.code,{children:"benchmarks.txt"})," in sequence (usually in < 10min).\nAfter completion, the results will be printed as an ASCII table to the terminal as well to the CSV file ",(0,s.jsx)(n.code,{children:"benchmark-results.csv"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Documentation."})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We provide more detailed usage and syntax instructions in our documentation. It is ",(0,s.jsx)(n.a,{href:"https://www.caesarverifier.org",children:"available online"})," and the source code can be found in ",(0,s.jsx)(n.code,{children:"docs/src"})," (Markdown files)."]}),"\n",(0,s.jsx)(n.li,{children:"Caesar has Rustdoc documentation, but we do not include the generated files or the Rust compiler in this artifact."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-piece-by-piece-how-our-artifact-supports-the-papers-claims",children:"2. Piece by Piece: How Our Artifact Supports the Paper's Claims"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Section 5.2"})," of our paper states our key claims with respect to this artifact."]}),"\n",(0,s.jsx)(n.p,{children:"In this document,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Section 2.1."})," explains how to run our benchmarks (Table 2)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Section 2.3."})," explains how to automatically generate HeyVL files using our prototypical frontend pgcl2heyvl."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"21-running-our-benchmarks",children:"2.1. Running Our Benchmarks"}),"\n",(0,s.jsx)(n.p,{children:"To reproduce our benchmarks (Table 2), execute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fish run-benchmarks.fish\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The script will run the list of benchmarks specified in ",(0,s.jsx)(n.code,{children:"benchmarks.txt"})," in sequence.\nAfter completion (usually in < 10min), the results will be printed as an ASCII table to the terminal as well to the CSV file ",(0,s.jsx)(n.code,{children:"benchmark-results.csv"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Note: To allow reproducing results on slower machines and virtualized environments, we increased the timeout for each benchmark from 10s to 60s."}),"\n",(0,s.jsx)(n.h3,{id:"22-the-caesar-tool-and-its-source-code",children:"2.2. The Caesar Tool and Its Source Code"}),"\n",(0,s.jsxs)(n.p,{children:["Our tool is available as the ",(0,s.jsx)(n.code,{children:"caesar"})," command.\nThe source code is in the entry directory (",(0,s.jsx)(n.code,{children:"/root/caesar"}),").\nIn particular, the ",(0,s.jsx)(n.code,{children:"src"})," and ",(0,s.jsx)(n.code,{children:"z3rro"})," directories are relevant.\nBoth are documented using Rust doc comments."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Running Caesar directly."}),"\nIt can be executed with ",(0,s.jsx)(n.code,{children:"caesar [filename]"})," where the file contains a HeyVL program.\nOur benchmarks can be found in the following directories:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pgcl/examples-heyvl"}),": This directory contains the 85% of our benchmarks which were automatically generated using pgcl2heyvl."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests"}),": This directory contains remaining 15% of the benchmarks which are hand-written HeyVL files (cf. Section 5.2 in our paper)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--timeout [SECONDS]"})," and ",(0,s.jsx)(n.code,{children:"--mem [MEGABYTES]"})," command-line options are useful to set runtime and memory limits."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"HeyVL Syntax."}),"\nCaesar accepts a modified version of our syntax from the paper.\nWe refer to our documentation section on the language: ",(0,s.jsx)(n.a,{href:"https://moves-rwth.github.io/caesar/heyvl/index.html",children:"It is online"}),", and contained in the artifact in ",(0,s.jsx)(n.code,{children:"docs/src/heyvl"}),".\nExample HeyVL files in the ",(0,s.jsx)(n.code,{children:"pgcl/examples"})," and ",(0,s.jsx)(n.code,{children:"tests/"})," directories."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"VSCode extension for syntax highlighting."}),"\nWe have a VSCode extension for HeyVL syntax highlighting.\nSee ",(0,s.jsx)(n.code,{children:"vscode-ext/README.md"})," for installation instructions.\nYou might need to do this outside of your Docker container, so run ",(0,s.jsx)(n.code,{children:"docker cp CONTAINER:/root/caesar/vscode-ext $PWD"})," to copy the directory out of the container and then run the installation."]}),"\n",(0,s.jsxs)(n.p,{children:["We recommend using this extension with a ",(0,s.jsx)(n.a,{href:"https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host",children:"VSCode Remote connection to the Docker container"})," when editing HeyVL files for convenience."]}),"\n",(0,s.jsx)(n.h3,{id:"23-pgcl2heyvl-generating-heyvl-files-from-pgcl",children:"2.3. pgcl2heyvl: Generating HeyVL Files From pGCL"}),"\n",(0,s.jsxs)(n.p,{children:["This pGCL frontend is available as the ",(0,s.jsx)(n.code,{children:"pgcl2heyvl"})," command.\nIts source code is provided in the ",(0,s.jsx)(n.code,{children:"pgcl/pgcl2heyvl"})," directory as a ",(0,s.jsx)(n.a,{href:"https://python-poetry.org/",children:"Poetry"})," package."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automatically generated benchmarks."}),"\nIn our paper, we claim that 85% of our benchmarks are automatically generated from pGCL code.\nThese pGCL examples are located in the ",(0,s.jsx)(n.code,{children:"pgcl/examples"})," directory."]}),"\n",(0,s.jsxs)(n.p,{children:["The corresponding generated HeyVL files are located in ",(0,s.jsx)(n.code,{children:"pgcl/examples-heyvl"}),".\nWe already generated all these HeyVL files with pgcl2heyvl."]}),"\n",(0,s.jsx)(n.p,{children:"In order to reproduce the process of automatically generating the HeyVL files, run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rm pgcl/examples-heyvl/*.heyvl # delete existing files\nfish pgcl/examples-heyvl/generate.fish # generate files\n"})}),"\n",(0,s.jsx)(n.p,{children:"See Section 2.2. for how to run the individual HeyVL files with Caesar."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Details."}),"\npgcl2heyvl parses pGCL programs in the syntax accepted by the ",(0,s.jsx)(n.a,{href:"https://philipp15b.github.io/probably/",children:"probably"})," Python package.\nSee the last section of this file for the grammar of pGCL programs."]}),"\n",(0,s.jsx)(n.p,{children:"At the top of every file must be a comment of the style"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-heyvl",children:"// ARGS: --encoding ... --pre ... --post ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["according to the CLI documentation of the pgcl2heyvl tool (run ",(0,s.jsx)(n.code,{children:"pgcl2heyvl --help"}),")."]}),"\n",(0,s.jsx)(n.h1,{id:"3-a-guide-to-custom-examples",children:"3. A Guide To Custom Examples"}),"\n",(0,s.jsxs)(n.p,{children:["We will look at our ",(0,s.jsx)(n.code,{children:"geo1"})," example to see how you can create your own examples for pgcl2heyvl and Caesar."]}),"\n",(0,s.jsx)(n.h2,{id:"31-from-pgcl-to-heyvl",children:"3.1. From pGCL to HeyVL"}),"\n",(0,s.jsxs)(n.p,{children:["There is a pGCL file for ",(0,s.jsx)(n.code,{children:"geo1"})," in ",(0,s.jsx)(n.code,{children:"pgcl/examples/geo1.pgcl"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// ARGS: --encoding "encode-k-induction" --calculus "wp" --post c --pre "c+1" --k 2\n\nnat c;\nnat f;\n\nwhile(f=1){\n   {f := 0}[0.5]{c := c+1}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["pgcl2heyvl can be used to create a corresponding HeyVL file that uses the annotations in the first line to prove that ",(0,s.jsx)(n.code,{children:"wp[geo1](c) <= c+1"})," holds using ",(0,s.jsx)(n.code,{children:"k"}),"-induction with ",(0,s.jsx)(n.code,{children:"k=2"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"pgcl2heyvl pgcl/examples/geo1.pgcl > mygeo.heyvl\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will create a ",(0,s.jsx)(n.code,{children:"mygeo.heyvl"})," file."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Things to Try:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set the ",(0,s.jsx)(n.code,{children:"pre"})," to ",(0,s.jsx)(n.code,{children:"c+2"}),". This is still a valid upper bound (and the HeyVL file should verify.)"]}),"\n",(0,s.jsxs)(n.li,{children:["Set the ",(0,s.jsx)(n.code,{children:"pre"})," to ",(0,s.jsx)(n.code,{children:"c"}),". This is ",(0,s.jsx)(n.em,{children:"not"})," a valid upper bound (and Caesar should give a counter-example later)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),"\npgcl2heyvl has a slighly different syntax for programs than Caesar accepts.\nIt also does not accept domain declarations (including user-defined functions and axioms).\nWe are working on a more convenient implementation."]}),"\n",(0,s.jsx)(n.h2,{id:"32-verifying-heyvl-files-with-caesar",children:"3.2. Verifying HeyVL Files With Caesar"}),"\n",(0,s.jsxs)(n.p,{children:["Simply run ",(0,s.jsx)(n.code,{children:"caesar"})," with your new file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"caesar mygeo.heyvl\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and it prints that the main generated ",(0,s.jsx)(n.code,{children:"coproc"})," either verifies or not (depending on your modifications)."]}),"\n",(0,s.jsx)(n.p,{children:"You can of course create HeyVL files directly.\nTo encode loops, use the encodings detailed in the appendix of our paper."}),"\n",(0,s.jsx)(n.h1,{id:"4-appendix-accepted-syntax-by-the-pgcl2heyvl-tool",children:"4. Appendix: Accepted Syntax by the pgcl2heyvl Tool"}),"\n",(0,s.jsxs)(n.p,{children:["An excerpt from the ",(0,s.jsx)(n.a,{href:"https://github.com/lark-parser/lark",children:"Lark"})," grammar for pGCL programs used in the probably library:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'declaration: "bool" var                  -> bool\n            | "nat" var bounds?           -> nat\n            | "const" var ":=" expression -> const\n\nbounds: "[" expression "," expression "]"\n\ninstruction: "skip"                                      -> skip\n           | "while" "(" expression ")" block            -> while\n           | "if" "(" expression ")" block "else"? block -> if\n           | var ":=" rvalue                             -> assign\n           | block "[" expression "]" block              -> choice\n           | "tick" "(" expression ")"                   -> tick\n\nrvalue: "unif" "(" expression "," expression ")" -> uniform\n      | expression\n\nliteral: "true"  -> true\n       | "false" -> false\n       | INT     -> nat\n       | FLOAT   -> float\n       | "\u221e"     -> infinity\n       | "\\infty" -> infinity\n'})}),"\n",(0,s.jsx)(n.p,{children:"Expressions in programs and expectations can be built from the following operators, grouped by precedence:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"||"}),", ",(0,s.jsx)(n.code,{children:"&"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<="}),", ",(0,s.jsx)(n.code,{children:"<"}),", ",(0,s.jsx)(n.code,{children:"="})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"+"}),", ",(0,s.jsx)(n.code,{children:"-"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*"}),", ",(0,s.jsx)(n.code,{children:":"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"/"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"not "}),", ",(0,s.jsx)(n.code,{children:"( ... )"}),", ",(0,s.jsx)(n.code,{children:"[ ... ]"}),", ",(0,s.jsx)(n.code,{children:"literal"}),", ",(0,s.jsx)(n.code,{children:"var"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whitespace is generally ignored."})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var r=i(6540);const s={},c=r.createContext(s);function o(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);