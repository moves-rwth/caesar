"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[5230],{9599:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=n(4497),a=n(4848),r=n(8453),t=n(8774);const o={authors:"phisch",tags:["releases"]},l="Caesar 2.0: VSCode Extension, Slicing, and more!",c={authorsImageUrls:[void 0]},d=[{value:"<em>Caesar Verifier</em> Visual Studio Code Extension",id:"caesar20-vscode-extension",level:2},{value:"Slicing for Error Reporting and Correctness",id:"caesar20-slicing",level:2},{value:"Assertion Slicing",id:"assertion-slicing",level:3},{value:"Assumption Slicing",id:"assumption-slicing",level:3},{value:"General Slicing",id:"general-slicing",level:3},{value:"Calculus Annotations for Proof Rules",id:"caesar20-calculi",level:2},{value:"Model Checking Support via JANI",id:"caesar20-jani",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["We are happy to announce ",(0,a.jsx)(s.em,{children:"Caesar 2.0"}),": the next release of Caesar packed with a lot of new features."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Overview:"})}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsxs)(s.a,{href:"/blog/2024/05/20/caesar-2-0#caesar20-vscode-extension",children:[(0,a.jsx)(s.em,{children:"Caesar Verifier"})," Visual Studio Code Extension"]})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/blog/2024/05/20/caesar-2-0#caesar20-slicing",children:"Slicing for Error Reporting and Correctness"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/blog/2024/05/20/caesar-2-0#caesar20-calculi",children:"Calculus Annotations for Proof Rules"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/blog/2024/05/20/caesar-2-0#caesar20-jani",children:"Model Checking Support via JANI"})}),"\n"]}),"\n",(0,a.jsxs)(s.h2,{id:"caesar20-vscode-extension",children:[(0,a.jsx)(s.em,{children:"Caesar Verifier"})," Visual Studio Code Extension"]}),"\n","\n",(0,a.jsx)(t.A,{to:"https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar",children:(0,a.jsx)("img",{src:"/img/vc-demo.png",style:{float:"right",maxWidth:"350px",marginLeft:"1em"},className:"item shadow--tl"})}),"\n",(0,a.jsxs)(s.p,{children:["Our new ",(0,a.jsx)(s.em,{children:"Caesar Verifier"})," VSCode extension is now the recommended way to use Caesar.\nThe extension is available in the VSCode and VSCodium extension marketplaces and can be installed by searching for ",(0,a.jsx)(s.em,{children:"Caesar Verifier"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["The extension is built on the ",(0,a.jsx)(s.a,{href:"https://microsoft.github.io/language-server-protocol/",children:"Language Server Protocol"})," and uses the Caesar binary under the hood."]}),"\n",(0,a.jsx)(t.A,{className:"button button--primary",to:"https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar",children:"Go to Caesar Verifier on VSCode Marketplace"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Features:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Syntax highlighting and language configuration for HeyVL."}),"\n",(0,a.jsx)(s.li,{children:"Snippets for HeyVL."}),"\n",(0,a.jsx)(s.li,{children:"Verify HeyVL files on file save or on command."}),"\n",(0,a.jsx)(s.li,{children:"Verification errors and successes are shown in the gutter via icons."}),"\n",(0,a.jsxs)(s.li,{children:['Diagnostics such as errors or warnings are shown in the code and in the "Problems" menu in VSCode \u2014 ',(0,a.jsx)(s.a,{href:"#caesar20-slicing",children:"powered by slicing!"})]}),"\n",(0,a.jsx)(s.li,{children:"Inline explanations of computed verification conditions (shown in picture!)."}),"\n",(0,a.jsx)(s.li,{children:"Automatic installation and updating of Caesar."}),"\n"]}),"\n",(0,a.jsx)("div",{style:{clear:"both"}}),"\n",(0,a.jsx)(s.h2,{id:"caesar20-slicing",children:"Slicing for Error Reporting and Correctness"}),"\n",(0,a.jsx)(s.h3,{id:"assertion-slicing",children:"Assertion Slicing"}),"\n",(0,a.jsx)(t.A,{to:n(7849).A,children:(0,a.jsx)("img",{src:n(7849).A,style:{float:"right",maxWidth:"350px",marginLeft:"1em"},className:"item shadow--tl"})}),"\n",(0,a.jsxs)(s.p,{children:["The error reports in Caesar are driven by the first implementation of specification-based slicing for probabilistic programs.\nBy default, our slicing implementation is used to identify which ",(0,a.jsx)(s.code,{children:"assert"}),"-like statements are responsible for errors (",(0,a.jsxs)(s.a,{href:"/docs/caesar/slicing#assertion-slicing",children:["Caesar's ",(0,a.jsx)(s.em,{children:"assertion slicing"})]}),")."]}),"\n",(0,a.jsx)(s.p,{children:"An example is shown on the right.\nThe slicing algorithm has determined that the invariant might not be inductive and could rule out e.g. that the pre does not entail the invariant."}),"\n",(0,a.jsxs)(s.p,{children:["Caesar's slicing does not operate on high-level programs with loops, but instead on the low-level HeyVL statements, including verification statements.\nThis enables error reporting (and other slicing applications) for any verification problems that you can encode in HeyVL.\nCustom error messages can be added via ",(0,a.jsx)(s.a,{href:"/docs/caesar/slicing#slicing-message-annotations",children:"slice message annotations"}),"."]}),"\n",(0,a.jsx)("div",{style:{clear:"both"}}),"\n",(0,a.jsx)(s.h3,{id:"assumption-slicing",children:"Assumption Slicing"}),"\n",(0,a.jsx)(t.A,{to:n(3153).A,children:(0,a.jsx)("img",{src:n(3153).A,style:{float:"right",maxWidth:"330px",marginLeft:"1em"},className:"item shadow--tl"})}),"\n",(0,a.jsxs)(s.p,{children:["Whereas assertion slicing is concerned with finding a minimal set of assertions in the program so that the program still has an error, ",(0,a.jsx)(s.a,{href:"/docs/caesar/slicing#assumption-slicing",children:(0,a.jsx)(s.em,{children:"assumption slicing"})})," tries to find a minimal set of assumptions so that the program still verifies."]}),"\n",(0,a.jsxs)(s.p,{children:["In the example on the right, we can see a slightly modified version of the geometric loop example from above.\nNow it has a constant starting value of zero.\nWith the correct invariant, the program verifies.\nBut Caesar can also tell us that this ",(0,a.jsx)(s.code,{children:"while"})," loop could also be an ",(0,a.jsx)(s.code,{children:"if"})," statement \u2014 no loop is required to satisfy the specification.\nThe interpretation of this result is up to the user.\nMaybe the program can be simplified, but maybe the specification is not as strong as one thought and needs to be strengthened!"]}),"\n",(0,a.jsx)("div",{style:{clear:"both"}}),"\n",(0,a.jsx)(s.h3,{id:"general-slicing",children:"General Slicing"}),"\n",(0,a.jsx)(t.A,{to:n(6588).A,children:(0,a.jsx)("img",{src:n(6588).A,style:{float:"right",maxWidth:"400px",marginLeft:"1em"},className:"item shadow--tl"})}),"\n",(0,a.jsx)(s.p,{children:"Caesar's implementation of slicing is not restricted to verification statements such as assertions and assumptions.\nWith program annotations, Caesar can be instructed to run slicing for correctness and try to eliminate unnecessary assignments from the program."}),"\n",(0,a.jsxs)(s.p,{children:["In the example on the right, we have a probabilistic program that encodes a Bayesian network.",(0,a.jsx)(s.sup,{children:(0,a.jsx)(s.a,{href:"#user-content-fn-1-bf9971",id:"user-content-fnref-1-bf9971","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),"\nWe have added the ",(0,a.jsxs)(s.a,{href:"/docs/caesar/slicing#general-slicing-for-correctness",children:[(0,a.jsx)(s.code,{children:"@slice_verify"})," annotation"]})," to have Caesar also try to slice assignments.\nCaesar determined that most assignments are not necessary to satisfy the specification."]}),"\n",(0,a.jsxs)(s.p,{children:["There is also a corresponding ",(0,a.jsxs)(s.a,{href:"/docs/caesar/slicing#general-slicing-for-errors",children:[(0,a.jsx)(s.code,{children:"@slice_error"})," annotation"]})," to do slicing for errors on statements that are not ",(0,a.jsx)(s.code,{children:"assert"}),"-like."]}),"\n",(0,a.jsx)("div",{style:{clear:"both"}}),"\n",(0,a.jsx)(s.h2,{id:"caesar20-calculi",children:"Calculus Annotations for Proof Rules"}),"\n",(0,a.jsx)(t.A,{to:n(5227).A,children:(0,a.jsx)("img",{src:n(5227).A,style:{float:"right",maxWidth:"400px",marginLeft:"1em"},className:"item shadow--tl"})}),"\n",(0,a.jsxs)(s.p,{children:["Caesar's HeyVL was designed as a ",(0,a.jsx)(s.a,{href:"/docs/publications#oopsla-23",children:"quantitative intermediate verification language"}),", therefore it allows encoding all sorts of potentially unsound proof rules.\nTo make it easier to use Caesar to verify high-level programs with loops with respect to well-known expectation-based calculi and proof rules, we have added ",(0,a.jsx)(s.a,{href:"/docs/proof-rules/calculi",children:"calculus annotations"})," to Caesar.\nThey are ",(0,a.jsx)(s.code,{children:"@wp"}),", ",(0,a.jsx)(s.code,{children:"@wlp"})," and ",(0,a.jsx)(s.code,{children:"@ert"}),".\nWhen they are added to a ",(0,a.jsx)(s.code,{children:"proc"}),"/",(0,a.jsx)(s.code,{children:"coproc"}),", Caesar will do some additional checks to ensure that proof rules are actually sound."]}),"\n",(0,a.jsx)("div",{style:{clear:"both"}}),"\n",(0,a.jsx)(s.h2,{id:"caesar20-jani",children:"Model Checking Support via JANI"}),"\n",(0,a.jsxs)(s.p,{children:["While deductive verification can deal with infinite state spaces, infinite data types, and is generally pretty awesome, sometimes you want to analyze a proabilistic program whose state space can be finitely represented.\nWith ",(0,a.jsx)(s.a,{href:"/docs/model-checking",children:"Caesar's model checking support via JANI"}),", you can export your probabilistic program to the ",(0,a.jsx)(s.a,{href:"https://jani-spec.org/",children:"JANI format"})," to use probabilistic model checkers."]}),"\n",(0,a.jsxs)(s.p,{children:["Caesar's support is limited to ",(0,a.jsx)(s.a,{href:"/docs/model-checking#supported-programs",children:"executable probabilistic programs"}),".\nThat means that quantitative verification statements like ",(0,a.jsx)(s.code,{children:"assert"}),", ",(0,a.jsx)(s.code,{children:"assume"}),", and ",(0,a.jsx)(s.code,{children:"havoc"})," are restricted or not supported."]}),"\n",(0,a.jsxs)(s.p,{children:["Caesar's JANI export was designed as a replacement for ",(0,a.jsx)(s.a,{href:"https://github.com/moves-rwth/storm/pull/456",children:"the recently deleted storm-pgcl"}),", and can now be used as a pGCL frontend for model checkers that accept JANI inputs."]}),"\n","\n",(0,a.jsxs)(s.section,{"data-footnotes":!0,className:"footnotes",children:[(0,a.jsx)(s.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{id:"user-content-fn-1-bf9971",children:["\n",(0,a.jsxs)(s.p,{children:["The program is Figure 7 of ",(0,a.jsx)(s.a,{href:"https://doi.org/10.1016/j.scico.2022.102822",children:"Marcelo Navarro, Federico Olmedo: Slicing of Probabilistic Programs Based on Specifications. ECOOP 2022"}),". ",(0,a.jsx)(s.a,{href:"#user-content-fnref-1-bf9971","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3153:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/assumption-slicing-demo-09d6f547e9ec06be1859b886264ac45f.png"},5227:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/calculi-demo-335befcfe628e522d042da2eb3488dda.png"},6588:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/general-slicing-demo-448dc2ed5f2790c1067e1f5e67703716.png"},7849:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/slicing-demo-433a52249f8293132265395163c2dca4.png"},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>o});var i=n(6540);const a={},r=i.createContext(a);function t(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:s},e.children)}},4497:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024/05/20/caesar-2-0","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2024-05-20-caesar-2-0.md","source":"@site/blog/2024-05-20-caesar-2-0.md","title":"Caesar 2.0: VSCode Extension, Slicing, and more!","description":"We are happy to announce Caesar 2.0: the next release of Caesar packed with a lot of new features.","date":"2024-05-20T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":4.355,"hasTruncateMarker":true,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch","page":null}],"frontMatter":{"authors":"phisch","tags":["releases"]},"unlisted":false,"prevItem":{"title":"A Game-Based Operational Semantics for HeyVL","permalink":"/blog/2024/12/31/game-based-semantics"},"nextItem":{"title":"ERC Proof of Concept Grant","permalink":"/blog/2024/01/18/erc-poc-grant"}}')}}]);