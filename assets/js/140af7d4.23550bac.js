"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[7304],{3490:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"proof-rules/omega-invariants","title":"\u03c9-Invariants","description":"\u03c9-invariants (\\"omega-invariants\\") allow proving lower bounds on the wp/ert-semantics of loops and upper bounds on the wlp-semantics.","source":"@site/docs/proof-rules/omega-invariants.md","sourceDirName":"proof-rules","slug":"/proof-rules/omega-invariants","permalink":"/docs/proof-rules/omega-invariants","draft":false,"unlisted":false,"editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/docs/proof-rules/omega-invariants.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Loop Unrolling","permalink":"/docs/proof-rules/unrolling"},"next":{"title":"Almost-Sure Termination","permalink":"/docs/proof-rules/ast"}}');var t=i(4848),s=i(8453);const r={sidebar_position:4},a="\u03c9-Invariants",l={},c=[{value:"Usage",id:"usage",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"\u03c9-invariants",children:"\u03c9-Invariants"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"\u03c9-invariants"}),' ("omega-invariants") allow proving lower bounds on the ',(0,t.jsx)(n.code,{children:"wp"}),"/",(0,t.jsx)(n.code,{children:"ert"}),"-semantics of loops and upper bounds on the ",(0,t.jsx)(n.code,{children:"wlp"}),"-semantics.\nIn essence, they are a proof rule that encodes an induction on the fixpoint iteration semantics of a loop."]}),"\n",(0,t.jsxs)(n.p,{children:["The proof rule is explained well following ",(0,t.jsx)(n.a,{href:"http://publications.rwth-aachen.de/record/755408/files/755408.pdf#page=122",children:"Definition 5.3 of Benjamin Kaminski's PhD thesis"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Caesar supports \u03c9-invariants as a built-in encoding with the ",(0,t.jsx)(n.code,{children:"@omega_invariant"})," annotation on ",(0,t.jsx)(n.code,{children:"while"})," loops."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["The example below shows how we can use an \u03c9-invariant to prove a lower bound on the ",(0,t.jsx)(n.code,{children:"ert"}),"-semantics of a loop.\nThe loop decrements a variable ",(0,t.jsx)(n.code,{children:"x"})," in each iteration, and we want to show that the expected runtime to termination is at least ",(0,t.jsx)(n.code,{children:"x"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"@ert proc omega(init_x: UInt) -> (x: UInt)\n    pre init_x\n    post 0\n{\n    x = init_x\n\n    @omega_invariant(n, [x<=n] * x)\n    while 0 <= x {\n        tick 1\n        x = x - 1\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inputs:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"n"}),": A variable name for the count that shows up in the invariant."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"invariant"}),": An invariant in the program variables and ",(0,t.jsx)(n.code,{children:"n"})," that lower bounds the fixpoint iteration in every step."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var o=i(6540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);