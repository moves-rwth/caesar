"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[8184],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,u=m["".concat(o,".").concat(d)]||m[d]||h[d]||p;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,i=new Array(p);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<p;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>p,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const p={sidebar_position:11},i="pgcl2heyvl Frontend",l={unversionedId:"pgcl",id:"pgcl",title:"pgcl2heyvl Frontend",description:"The now deprecated pgcl2heyvl tool is a frontend for pGCL programs written in the syntax of the probably library",source:"@site/docs/pgcl.md",sourceDirName:".",slug:"/pgcl",permalink:"/docs/pgcl",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/pgcl.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"docsSidebar",previous:{title:"OOPSLA '23 Artifact Evaluation Guide",permalink:"/docs/OOPSLA_AEC"}},o={},s=[{value:"Installing pgcl2heyvl",id:"installing-pgcl2heyvl",level:2},{value:"Using pgcl2heyvl",id:"using-pgcl2heyvl",level:2},{value:"pGCL Examples",id:"pgcl-examples",level:2},{value:"pGCL Syntax",id:"pgcl-syntax",level:2}],c={toc:s},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pgcl2heyvl-frontend"},"pgcl2heyvl Frontend"),(0,r.kt)("p",null,"The now deprecated ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl")," tool is a frontend for pGCL programs written in the syntax of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Philipp15b/probably"},(0,r.kt)("em",{parentName:"a"},"probably")," library"),"\nGiven an annotated pGCL program, it automatically generates HeyVL code for Caesar."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl")," tool is deprecated and its functionality is now fully integrated into Caesar itself.\nSimply use HeyVL ",(0,r.kt)("a",{parentName:"p",href:"/docs/heyvl/statements"},"statements")," and use the built-in ",(0,r.kt)("a",{parentName:"p",href:"/docs/proof-rules/"},"proof rules")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loops."),(0,r.kt)("p",{parentName:"admonition"},"Using HeyVL directly enables the use of the proof rule encodings with features of Caesar that pgcl2heyvl does not support, such as ",(0,r.kt)("a",{parentName:"p",href:"/docs/heyvl/domains"},"domain declarations")," or a more powerful set of ",(0,r.kt)("a",{parentName:"p",href:"/docs/heyvl/expressions"},"expressions"),".\nFurthermore, Caesar's proof rules have support for ",(0,r.kt)("a",{parentName:"p",href:"/docs/caesar/slicing"},"slicing"),', which enables detailed error messages such as "the invariant is not inductive".')),(0,r.kt)("h2",{id:"installing-pgcl2heyvl"},"Installing pgcl2heyvl"),(0,r.kt)("p",null,"To run ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl"),", first install dependencies using ",(0,r.kt)("a",{parentName:"p",href:"https://python-poetry.org/"},"poetry"),".\nPoetry is a build system and dependency manager for Python.\n",(0,r.kt)("a",{parentName:"p",href:"https://python-poetry.org/docs/"},"Here are installation instructions for Poetry"),"."),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/pgcl2heyvl"},(0,r.kt)("inlineCode",{parentName:"a"},"pgcl/pgcl2heyvl")," directory"),", install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd pgcl/pgcl2heyvl\npoetry install\n")),(0,r.kt)("h2",{id:"using-pgcl2heyvl"},"Using pgcl2heyvl"),(0,r.kt)("p",null,"After installation, use ",(0,r.kt)("inlineCode",{parentName:"p"},"poetry run")," to run ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd pgcl/pgcl2heyvl\npoetry run pgcl2heyvl FILE > OUTFILE\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"FILE")," is a file name with the pGCL program and ",(0,r.kt)("inlineCode",{parentName:"p"},"OUTFILE")," is the name of the output file with the HeyVL code."),(0,r.kt)("p",null,"The first line in ",(0,r.kt)("inlineCode",{parentName:"p"},"FILE")," must include ",(0,r.kt)("inlineCode",{parentName:"p"},"// ARGS: --post POST --pre PRE --k K"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," is a post-expectation, and ",(0,r.kt)("inlineCode",{parentName:"p"},"PRE")," is a pre-expectation (in ",(0,r.kt)("a",{parentName:"p",href:"#pgcl-syntax"},"pGCL syntax"),").\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," argument is an integer that specifies which ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"-induction to use for the encoding."),(0,r.kt)("p",null,"If the pGCL program includes a single loop, then ",(0,r.kt)("inlineCode",{parentName:"p"},"PRE")," will be used as the loop invariant.\nWhen the program includes multiple loops, additional invariants must be specified using ",(0,r.kt)("inlineCode",{parentName:"p"},"--invariant"),"."),(0,r.kt)("p",null,"The command-line interface documentation is available by invoking ",(0,r.kt)("inlineCode",{parentName:"p"},"poetry run pgcl2heyvl --help"),"."),(0,r.kt)("h2",{id:"pgcl-examples"},"pGCL Examples"),(0,r.kt)("p",null,"You can find pGCL examples in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/examples"},(0,r.kt)("inlineCode",{parentName:"a"},"pgcl/examples"))," directory.\nThey include all necessary parameters to generate verifying HeyVL files."),(0,r.kt)("p",null,"For these examples, the generated HeyVL files are located under ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/examples-heyvl"},(0,r.kt)("inlineCode",{parentName:"a"},"pgcl/examples-heyvl")),".\nVerification with ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," requires the ",(0,r.kt)("inlineCode",{parentName:"p"},"--raw")," command-line flag since these files are just sequences of HeyVL statements."),(0,r.kt)("p",null,"Instructions on how to (re-)generate these examples are located in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moves-rwth/caesar/blob/main/pgcl/examples-heyvl/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"pgcl/examples-heyvl/README.md")),"."),(0,r.kt)("p",null,"To execute ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," with the generated HeyVL files, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/caesar/benchmarks"},"benchmarks section of Caesar's documentation"),"."),(0,r.kt)("h2",{id:"pgcl-syntax"},"pGCL Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl")," uses the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Philipp15b/probably"},(0,r.kt)("inlineCode",{parentName:"a"},"probably"))," Python library to parse and type-check pGCL programs.\nThat means the pGCL syntax of ",(0,r.kt)("inlineCode",{parentName:"p"},"probably")," is used for the pGCL programs and the ",(0,r.kt)("inlineCode",{parentName:"p"},"--pre"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--post"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"--invariant")," command-line parameters."),(0,r.kt)("p",null,"There is no formal specification for the exact pGCL syntax that ",(0,r.kt)("inlineCode",{parentName:"p"},"probably")," accepts, but here are some pointers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pGCL examples in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/moves-rwth/caesar/tree/master/pgcl/examples"},(0,r.kt)("inlineCode",{parentName:"a"},"pgcl/examples")),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://philipp15b.github.io/probably/pgcl.html"},(0,r.kt)("inlineCode",{parentName:"a"},"probably")," documentation"),". There are many doctests with examples."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://philipp15b.github.io/probably/pgcl_grammar.html#pgcl-grammar"},"grammar specification")," used by ",(0,r.kt)("inlineCode",{parentName:"li"},"probably")," built on top of the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/lark-parser/lark"},"Lark parsing toolkit"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Philipp15b/probably/tree/master/tests"},(0,r.kt)("inlineCode",{parentName:"a"},"probably"),"'s tests"),".")))}h.isMDXComponent=!0}}]);