"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[2535],{4707:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var i=s(2032),r=s(4848),o=s(8453);const l={authors:"phisch",tags:["releases"]},a="Caesar 2.1: UI Improvements, More Guardrails, and Improvements to Slicing",t={authorsImageUrls:[void 0]},c=[{value:"UI and Documentation Improvements",id:"ui-and-docs",level:2},{value:"More Guardrails",id:"more-guardrails",level:2},{value:"Improvements to Slicing",id:"improvements-to-slicing",level:2},{value:"Command-Line Interface",id:"command-line-interface",level:2},{value:"Minor Fixes",id:"minor-fixes",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"Caesar 2.1"})," release adds contains various improvements to existing features and fixes some bugs."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Overview:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/blog/2025/01/17/caesar-2-1#ui-and-docs",children:"UI and Documentation Improvements"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/blog/2025/01/17/caesar-2-1#more-guardrails",children:"More Guardrails"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/blog/2025/01/17/caesar-2-1#improvements-to-slicing",children:"Slicing Improvements"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/blog/2025/01/17/caesar-2-1#minor-fixes",children:"Minor Fixes"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ui-and-docs",children:"UI and Documentation Improvements"}),"\n",(0,r.jsxs)(n.p,{children:["We have improved Caesar's UI, especially the Visual Studio Code extension.\nThanks to PRs ",(0,r.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/pull/48",children:"#48"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/pull/60",children:"#60"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We now properly support verification with multiple open HeyVL files (before, the extension only remembered the latest verification task). This includes error messages and warnings."}),"\n",(0,r.jsx)(n.li,{children:"We improved the wording in the status bar to more accurately reflect the verification status."}),"\n",(0,r.jsx)(n.li,{children:'Proper handling of "unknown" results from the SMT solver.'}),"\n",(0,r.jsx)(n.li,{children:"The tooltip menu on the status bar is much more dynamic and supports more features depending on verification results."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/pull/59",children:"PR #59"})," added verification condition explanations for the ",(0,r.jsx)(n.code,{children:"@unroll"})," proof rule."]}),"\n",(0,r.jsx)(n.p,{children:"Additionally:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We now automatically start the Caesar LSP server if a HeyVL file is opened."}),"\n",(0,r.jsx)(n.li,{children:"The default timeout for Caesar in VS Code is now 60 seconds (previously it was 300 seconds)."}),"\n",(0,r.jsx)(n.li,{children:"The documentation for various features of Caesar has been improved with notes about some relevant theoretical aspects."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"more-guardrails",children:"More Guardrails"}),"\n",(0,r.jsxs)(n.p,{children:['Caesar now prevents accidental unsound verification through more "guardrails".\nThis extends the soundness checks from ',(0,r.jsx)(n.a,{href:"/docs/proof-rules/calculi",children:"calculus annotations"})," feature introduced in the last release.\nThanks to ",(0,r.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/pull/42",children:"PR #42"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We now check that procedures only call other procedures with the same calculus annotations.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If either the caller or callee has no calculus annotation, we do not currently warn the user."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["We now check that ",(0,r.jsx)(n.code,{children:"proc"}),"s are only called inside ",(0,r.jsx)(n.code,{children:"proc"}),"s (and analogously for ",(0,r.jsx)(n.code,{children:"coproc"}),"s)."]}),"\n",(0,r.jsx)(n.li,{children:"Various other checks for proof rule annotations have been improved."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"improvements-to-slicing",children:"Improvements to Slicing"}),"\n",(0,r.jsxs)(n.p,{children:["We have been hard at work to complete and further improve ",(0,r.jsx)(n.a,{href:"/docs/caesar/slicing",children:"Caesar's slicing support"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We now support slicing probabilistic choices via the command-line flag ",(0,r.jsx)(n.code,{children:"--slice-sampling"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This is disabled by default because we have observed negative performance effects for relatively little gain in the average case."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Caesar now uses irrelevancy information from the SMT solver to speed up the slice search."}),"\n",(0,r.jsxs)(n.li,{children:["Caesar no longer highlights the entire procedure if it does not have a ",(0,r.jsx)(n.code,{children:"pre"})," when slicing for verification."]}),"\n",(0,r.jsx)(n.li,{children:"We now properly slice demonic and angelic choices."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We added additional slicing backends to slice verifying programs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A slicing backend on unsatisfiable cores was added (",(0,r.jsx)(n.code,{children:"core"}),"). It is very fast, but does not report optimal slices in many cases.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This backend is now the default when slicing verifying programs."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["We implemented minimal unsat core enumeration to support finding the locally or globally smallest slices (",(0,r.jsx)(n.code,{children:"mus"})," and ",(0,r.jsx)(n.code,{children:"sus"})," backends)."]}),"\n",(0,r.jsxs)(n.li,{children:["The old ",(0,r.jsx)(n.code,{children:"exists-forall"})," backend still exists, but is not recommended for the general use case because it does not support reasoning with uninterpreted functions."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"command-line-interface",children:"Command-Line Interface"}),"\n",(0,r.jsx)(n.p,{children:"Caesar's command-line interface has been redesigned.\nThe binary now accepts different sub-commands to enable different tasks."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The new ",(0,r.jsx)(n.code,{children:"verify"})," command includes all behavior of the previous Caesar CLI interface.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If no sub-command is specified, this command will be used. Therefore, the command-line interface is backwards-compatible."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"to-jani"})," command can be used to only convert HeyVL files to JANI files without running Caesar's checks or verification."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"shell-completions"})," command can be used to generate code for shell completions for the ",(0,r.jsx)(n.code,{children:"caesar"})," binary."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Furthermore:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Caesar's ",(0,r.jsx)(n.code,{children:"--help"})," output is now much more organized and helpful."]}),"\n",(0,r.jsxs)(n.li,{children:["A new ",(0,r.jsx)(n.code,{children:"--no-verify"})," option can be used to skip the final SMT check. This is useful in conjunction with either ",(0,r.jsx)(n.code,{children:"--print-smt"})," or ",(0,r.jsx)(n.code,{children:"--smt-dir"})," options."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"--print-smt"})," and ",(0,r.jsx)(n.code,{children:"--smt-dir"})," flags will now emit the SMT-LIB code ",(0,r.jsx)(n.em,{children:"before"})," the final SMT call happens to avoid no output on timeouts."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"minor-fixes",children:"Minor Fixes"}),"\n",(0,r.jsx)(n.p,{children:"We have also fixed minor issues, for example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Proper error reporting when using the ",(0,r.jsx)(n.code,{children:"@k_induction"})," proof rule with the invalid parameter ",(0,r.jsx)(n.code,{children:"k = 0"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"--smt-dir"})," flag now works properly on Windows."]}),"\n",(0,r.jsx)(n.li,{children:"Fixed syntax highlighting of block comments in VS Code."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},o=i.createContext(r);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:n},e.children)}},2032:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/01/17/caesar-2-1","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2025-01-17-caesar-2-1.md","source":"@site/blog/2025-01-17-caesar-2-1.md","title":"Caesar 2.1: UI Improvements, More Guardrails, and Improvements to Slicing","description":"The Caesar 2.1 release adds contains various improvements to existing features and fixes some bugs.","date":"2025-01-17T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":3.295,"hasTruncateMarker":true,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch","page":null}],"frontMatter":{"authors":"phisch","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Foundations for Verification of Continuous Programs with Caesar","permalink":"/blog/2025/04/11/foundations-continuous"},"nextItem":{"title":"A Game-Based Operational Semantics for HeyVL","permalink":"/blog/2024/12/31/game-based-semantics"}}')}}]);