"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[4195],{3261:(e,t,a)=>{a.r(t),a.d(t,{default:()=>g});var n=a(7294),l=a(6010),r=a(9960),s=a(2263),o=a(1155),i=a(7462);const c={features:"features_t9lD",featureBox:"featureBox_LvN1",featureSvg:"featureSvg_GfXr",invertDark:"invertDark_jaEU"};var m=a(614);const u=[{title:"Expectation-Based Reasoning",image:"/img/expected-value.svg",alt:"E(X)",description:n.createElement(n.Fragment,null,"Our approach is based on ",n.createElement("i",null,"weakest precondition-style reasoning"),", generalized to probabilistic programs. We can reason about lower and upper bounds of expected values."),invertDark:!0},{title:"A Quantitative Intermediate Verification Language",image:"/img/heyvl.svg",alt:"HeyVL Logo",description:n.createElement(n.Fragment,null,"Caesar is built on our novel quantitative intermediate verification language ",n.createElement("i",null,"HeyVL"),". ",n.createElement("br",null),n.createElement(r.Z,{to:"/docs/publications#oopsla-23"},"See our OOPSLA '23 paper!")),invertDark:!0},{title:"A Collaborative Effort",image:"/img/logos.svg",alt:"i2 Logo",description:n.createElement(n.Fragment,null,"Caesar is an open-source project from ",n.createElement(r.Z,{to:"https://moves.rwth-aachen.de/"},"RWTH Aachen University (MOVES group)"),", ",n.createElement(r.Z,{to:"https://quave.cs.uni-saarland.de/"},"Saarland University (QUAVE group)"),", ",n.createElement(r.Z,{to:"https://www.compute.dtu.dk/english/research/research-sections/software-systems-engineering"},"Denmark Technical University (SSE section)"),", and ",n.createElement(r.Z,{to:"http://pplv.cs.ucl.ac.uk/welcome/"},"University College London (PPLV group)"),"."),invertDark:!1}];function p(e){let{title:t,image:a,alt:r,description:s,invertDark:o}=e;const i=o?`${c.featureSvg} ${c.invertDark}`:c.featureSvg;return n.createElement("div",{className:(0,l.Z)("col col--4",c.featureBox)},n.createElement("div",{className:"text--center"},n.createElement("img",{src:a,className:i,alt:r})),n.createElement("div",{className:"text--center padding-horiz--md"},n.createElement("h3",null,t),n.createElement("p",null,s)))}function d(){return n.createElement("section",{className:c.features},n.createElement("div",{className:"container"},n.createElement("div",{className:"row"},u.map(((e,t)=>n.createElement(p,(0,i.Z)({key:t},e))))),n.createElement("hr",{style:{marginTop:"2.5em",marginBottom:"2.5em"}}),n.createElement("div",{className:"row"},n.createElement("div",{className:"col col--12"},n.createElement("h2",null,"Features of HeyVL \u2014 Lossy List Traversal Example"),n.createElement("p",null,"Let's look at a program that traverses a list but has a chance of crashing during the traversal. We'll verify that the crash probability is at least 50% if the list has length 1."),n.createElement("p",null,"We explain more of the details ",n.createElement(r.Z,{to:"/docs/getting-started/"},"as part of our getting started guide"),"."))),n.createElement("div",{className:"row"},n.createElement("div",{className:"col col--6"},n.createElement("h3",null,"\ud83d\udca5 ",n.createElement("code",null,"lossy_list")," Procedure"),n.createElement("p",null,"This ",n.createElement(r.Z,{to:"docs/heyvl/procs"},"procedure")," is the entry point. It has one output, the resulting list ",n.createElement("code",null,"l"),". In the body of ",n.createElement("code",null,"lossy_list"),", we traverse the list by repeatedly removing the first element using ",n.createElement("code",null,"pop"),". We model a 50% chance of crashing by a coin flip (",n.createElement("code",null,"flip(0.5)"),") leading to ",n.createElement("code",null,"assert [false]"),"."),n.createElement(m.Z,{language:"heyvl"},"proc lossy_list(init_l: List) -> (l: List)\n    pre [len(init_l) == 1] * 0.5  // quantitative specification!\n    post [true]\n{\n    l = init_l\n    @invariant(exp(0.5, len(l)))\n    while len(l) > 0 {\n        var prob_choice: Bool = flip(0.5) // coin flip\n        if prob_choice {\n            l = pop(l)     // next list element\n        } else {\n            assert [false] // crash\n        }\n    }\n}\n")),n.createElement("div",{className:"col col--6"},n.createElement("h3",null,"\ud83d\udcd0 Reading The Spec"),n.createElement("p",null,"Let's focus on the ",n.createElement("i",null,"quantitative specification")," of ",n.createElement("code",null,"lossy_list"),":"),n.createElement(m.Z,{language:"heyvl"},"pre [len(init_l) == 1] * 0.5\npost [true]"),n.createElement("p",null,"The ",n.createElement("code",null,"post")," says that we are looking at the expected value of ",n.createElement("code",null,"[true]")," (i.e. 1) in the final states of the program. In other words, we are interested in the probability of running without an error."),n.createElement("p",null,"The ",n.createElement("code",null,"pre")," specifies a lower bound to the probability of a run without crashing (expected value of the post ",n.createElement("code",null,"[true]"),"). It says that if the length of the list is 1, then the lower bound is ",n.createElement("code",null,"0.5")," and otherwise ",n.createElement("code",null,"0"),"."),n.createElement("p",null,"To verify the spec, the ",n.createElement("code",null,"while")," loop has an ",n.createElement("code",null,"@invariant")," annotation with a ",n.createElement(r.Z,{to:"/docs/proof-rules/induction"},"probabilistic invariant"),"."))),n.createElement("div",{className:"row"},n.createElement("div",{className:"col col--6"},n.createElement("h3",null,"\ud83c\udf0d Axiomatizing Exponentials and Lists"),n.createElement("p",null,"Here is a strength of deductive verification: users can axomatize additional functions and data types that can be used for verification! We simply declare the ",n.createElement(r.Z,{to:"/docs/heyvl/domains"},"uninterpreted sort and functions")," with just the necessary axioms in HeyVL."),n.createElement(m.Z,{language:"heyvl"},"domain Exponentials {\n    func exp(base: UReal, exponent: UInt): EUReal\n\n    axiom exp_base forall base: UReal. \n      exp(base, 0) == 1\n    axiom exp_step forall base: UReal, exponent: UInt. \n      exp(base, exponent + 1) == base * exp(base, exponent)\n}\n\ndomain List {\n    func len(l: List): UInt\n    func pop(l: List): List \n\n    axiom list_len forall l: List. \n      len(pop(l)) == len(l) - 1\n}")),n.createElement("div",{className:"col col--6"},n.createElement("h3",null,"\ud83c\udfc3 Running Caesar"),n.createElement("p",null,n.createElement(r.Z,{to:"https://github.com/moves-rwth/caesar/releases/latest"},"Download")," and extract the latest ",n.createElement("code",null,"caesar")," binary (or visit ",n.createElement(r.Z,{to:"/docs/getting-started"},n.createElement("i",null,"Getting Started"))," for alternative installation options)."),n.createElement("p",null,"The example from above is ",n.createElement(r.Z,{to:"https://github.com/moves-rwth/caesar/blob/main/tests/domains/lossy_list.heyvl"},"included in the Git repository"),". After downloading and storing it in ",n.createElement("code",null,"examples/lossy_list.heyvl")," you can try Caesar on it:"),n.createElement(m.Z,{language:"bash"},"caesar examples/lossy_list.heyvl"),n.createElement("p",null,"Caesar will print: ",n.createElement("code",null,"examples/lossy_list.heyvl: Verified."))))))}const h={heroBanner:"heroBanner_qdFl",heroBannerRow:"heroBannerRow_F26w",heroTitle:"heroTitle_qg2I",heroLogo:"heroLogo_U6bI",quickButtons:"quickButtons_fNHp",heroImageWrapper:"heroImageWrapper_Vsqa"};function E(){const{siteConfig:e}=(0,s.Z)();return n.createElement("header",{className:(0,l.Z)("hero hero--dark",h.heroBanner)},n.createElement("div",{className:"container"},n.createElement("div",{className:`row ${h.heroBannerRow}`},n.createElement("div",{className:"col col--7"},n.createElement("h1",{className:(0,l.Z)("hero__title",h.heroTitle)},n.createElement("img",{src:"/img/laurel.svg",className:h.heroLogo,alt:""}),n.createElement("span",null,e.title),n.createElement("img",{src:"/img/laurel.svg",className:h.heroLogo,style:{transform:"scale(-1, 1)"},alt:""})),n.createElement("p",{className:"hero__subtitle"},n.createElement("span",{style:{display:"inline-block"}},"A Deductive Verifier\xa0"),n.createElement("span",{style:{display:"inline-block"}},"for Probabilistic Programs")),n.createElement("div",{className:h.quickButtons},n.createElement(r.Z,{className:"button button--primary",to:"/docs/getting-started"},"Get Started \u2192"),n.createElement(r.Z,{className:"button button--primary",to:"/docs/"},"Docs"))),n.createElement("div",{className:`col col--5 ${h.heroImageWrapper}`},n.createElement(r.Z,{to:"/docs/",className:"margin--md shadow--md"},n.createElement("img",{src:"img/architecture-oopsla23.svg",alt:"Architecture diagram for Caesar"}))))))}function g(){const{siteConfig:e}=(0,s.Z)();return n.createElement(o.Z,{title:"Caesar Verification Infrastructure",description:`${e.tagline}`},n.createElement(E,null),n.createElement("main",null,n.createElement(d,null)))}}}]);