"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[351],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(k,l(l({ref:t},p),{},{components:n})):o.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},639:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905)),a=n(9960);const l={sidebar_position:1,description:"Procedure annotations for soundness of proof rules."},i="Calculus Annotations",s={unversionedId:"proof-rules/calculi",id:"proof-rules/calculi",title:"Calculus Annotations",description:"Procedure annotations for soundness of proof rules.",source:"@site/docs/proof-rules/calculi.md",sourceDirName:"proof-rules",slug:"/proof-rules/calculi",permalink:"/docs/proof-rules/calculi",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/proof-rules/calculi.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Procedure annotations for soundness of proof rules."},sidebar:"docsSidebar",previous:{title:"Proof Rules",permalink:"/docs/proof-rules/"},next:{title:"Induction and k-Induction",permalink:"/docs/proof-rules/induction"}},u={},p=[{value:"Usage",id:"usage",level:2},{value:"Soundness Overview of Proof Rules",id:"soundness-overview-of-proof-rules",level:2},{value:"What Is <em>Not</em> Checked By Caesar",id:"what-is-not-checked",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"calculus-annotations"},"Calculus Annotations"),(0,r.kt)("p",null,"Caesar supports annotations on procedures to specify a desired calculus to use.\nBy using these annotations, Caesar will help to check that only proof rules are used that are sound for that chosen calculus."),(0,r.kt)("p",null,"Right now, Caesar supports:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@wp"),": The ",(0,r.kt)("strong",{parentName:"li"},"weakest pre-expectation calculus")," that operates on non-negative real numbers and infinity.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It corresponds to expected values of probabilistic programs where non-termination yields expected value zero."),(0,r.kt)("li",{parentName:"ul"},"Correspondingly, it uses ",(0,r.kt)("em",{parentName:"li"},"least")," fixpoint semantics for loops."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@wlp"),": The ",(0,r.kt)("strong",{parentName:"li"},"weakest ",(0,r.kt)("em",{parentName:"strong"},"liberal")," pre-expectation calculus")," that operates on real numbers in the closed interval from zero to one.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It corresponds to expected values of probabilistic programs where non-termination yields expected value 1."),(0,r.kt)("li",{parentName:"ul"},"It uses ",(0,r.kt)("em",{parentName:"li"},"greatest")," fixpoint semantics for loops."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@ert"),": The ",(0,r.kt)("strong",{parentName:"li"},"expected runtime calculus")," for reasoning about expected runtimes or expected resource consumption of probabilistic programs.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The calculus is basically the same as the weakest pre-expectation calculus, with a lot of additonal ",(0,r.kt)("inlineCode",{parentName:"li"},"+ 1"),"s everywhere. In HeyVL, this corresponds to a bunch of ",(0,r.kt)("inlineCode",{parentName:"li"},"tick 1")," statements.")))),(0,r.kt)("p",null,"The formal details of these three calculi are presented very nicely in ",(0,r.kt)("a",{parentName:"p",href:"https://publications.rwth-aachen.de/record/755408/files/755408.pdf"},"Benjamin Kaminski's PhD thesis"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The calculus annotations do not automatically guarantee that your HeyVL file encodes your verification problems in a sound way.\nFor one, there are some conditions that are not (yet) checked by Caesar's implementation.\nSee the section ",(0,r.kt)("a",{parentName:"p",href:"#what-is-not-checked"},"What Is ",(0,r.kt)("em",{parentName:"a"},"Not")," Checked")," for more information.")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Simply add the respective annotation to your ",(0,r.kt)("inlineCode",{parentName:"p"},"proc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"coproc"),"."),(0,r.kt)("p",null,"For example, the following ",(0,r.kt)("inlineCode",{parentName:"p"},"proc")," declaration will not compile because ",(0,r.kt)("a",{parentName:"p",href:"/docs/proof-rules/induction"},"induction")," is not a sound proof rule to be used with ",(0,r.kt)("inlineCode",{parentName:"p"},"wp")," reasoning about lower bounds.\nA valid proof rule would be ",(0,r.kt)("a",{parentName:"p",href:"/docs/proof-rules/omega-invariants"},"\u03c9-invariants"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"@wp\nproc main() -> () {\n    var x: UInt\n    @invariant(x)\n    while 1 <= x {\n        x = x - 1\n    }\n}\n")),(0,r.kt)("p",null,"Each ",(0,r.kt)("a",{parentName:"p",href:"/docs/proof-rules/"},"built-in proof rule")," specifies their soundness theorem on their own documentation page (see the ",(0,r.kt)("em",{parentName:"p"},'"Soundness"')," sections)."),(0,r.kt)("h2",{id:"soundness-overview-of-proof-rules"},"Soundness Overview of Proof Rules"),(0,r.kt)("p",null,"So, what are the proof rules that can be used to reason about which calculus and about which direction?\nThe following table contains combinations of ",(0,r.kt)("em",{parentName:"p"},"sound approximation")," combinations, i.e. if the program with the proof rule verifies, then the original program with the true greatest/least fixpoint semantics satisfies the same specification as well."),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Proof Rule"),(0,r.kt)("td",null,(0,r.kt)("code",null,"@wp")),(0,r.kt)("td",null,(0,r.kt)("code",null,"@wlp")),(0,r.kt)("td",null,(0,r.kt)("code",null,"@ert")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./induction",mdxType:"Link"},"(k)-Induction")),(0,r.kt)("td",null,"Overapproximation (",(0,r.kt)("code",null,"coproc"),")"),(0,r.kt)("td",null,"Underapproximation (",(0,r.kt)("code",null,"proc"),")"),(0,r.kt)("td",null,"Overapproximation (",(0,r.kt)("code",null,"coproc"),")")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./unrolling",mdxType:"Link"},"Loop Unrolling")),(0,r.kt)("td",null,"Underapproximation (",(0,r.kt)("code",null,"proc"),")"),(0,r.kt)("td",null,"Overapproximation (",(0,r.kt)("code",null,"coproc"),")"),(0,r.kt)("td",null,"Underapproximation (",(0,r.kt)("code",null,"proc"),")")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./omega-invariants",mdxType:"Link"},"\u03c9-invariants")),(0,r.kt)("td",null,"Underapproximation (",(0,r.kt)("code",null,"proc"),")"),(0,r.kt)("td",null,"Overapproximation (",(0,r.kt)("code",null,"coproc"),")"),(0,r.kt)("td",null,"Underapproximation (",(0,r.kt)("code",null,"proc"),")")))),(0,r.kt)("p",null,"The following proof rules implicitly assume that you do not approximate in your while loops, but encode ",(0,r.kt)("em",{parentName:"p"},"exact")," ",(0,r.kt)("inlineCode",{parentName:"p"},"wp"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"ert")," semantics of your program.\nThis is because these proof rules implicitly do both lower and upper bounds checks on the loop body and thus the exact loop body semantics are required."),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Proof Rule"),(0,r.kt)("td",null,(0,r.kt)("code",null,"@wp")),(0,r.kt)("td",null,(0,r.kt)("code",null,"@wlp")),(0,r.kt)("td",null,(0,r.kt)("code",null,"@ert")))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./ast",mdxType:"Link"},"Almost-Sure Termination Rule")),(0,r.kt)("td",null,"Exact (",(0,r.kt)("code",null,"proc"),")"),(0,r.kt)("td",null,"Not Applicable"),(0,r.kt)("td",null,"Not Applicable")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./past",mdxType:"Link"},"Positive Almost-Sure Termination Rule")),(0,r.kt)("td",null,"Not Applicable"),(0,r.kt)("td",null,"Not Applicable"),(0,r.kt)("td",null,"Exact (",(0,r.kt)("code",null,"coproc"),")")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)(a.Z,{to:"./ost",mdxType:"Link"},"Optional Stopping Theorem")),(0,r.kt)("td",null,"Exact (",(0,r.kt)("code",null,"proc"),")"),(0,r.kt)("td",null,"Not Applicable"),(0,r.kt)("td",null,"Not Applicable")))),(0,r.kt)("h2",{id:"what-is-not-checked"},"What Is ",(0,r.kt)("em",{parentName:"h2"},"Not")," Checked By Caesar"),(0,r.kt)("p",null,"HeyVL is designed as an intermediate verification language and so it allows some dangerous features on purpose.\nSee our ",(0,r.kt)("a",{parentName:"p",href:"/docs/publications#oopsla-23-a-deductive-verification-infrastructure-for-probabilistic-programs-oopsla-23"},"OOPSLA '23 paper")," for more information.\nHowever, some items from the list below might also be disallowed in the future."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can easily introduce contradictions that lead to unsoundness.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"E.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"assume ?(false)")," can be used in ",(0,r.kt)("inlineCode",{parentName:"li"},"proc"),"s to make everything verify trivially."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/heyvl/domains#unsoundness-from-axioms"},"Unsoundness may come from axioms with contradictions"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"proc"),"s may call ",(0,r.kt)("inlineCode",{parentName:"li"},"coproc"),"s and vice versa. However, this is almost never sound."),(0,r.kt)("li",{parentName:"ul"},"Right now, you can call procedures of different calculi from each other without a warning."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tick")," statements may be used with ",(0,r.kt)("inlineCode",{parentName:"li"},"@wp")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"wlp"),", and it is not checked that a ",(0,r.kt)("inlineCode",{parentName:"li"},"tick")," statement actually occurs in an ",(0,r.kt)("inlineCode",{parentName:"li"},"@ert")," procedure.")))}m.isMDXComponent=!0}}]);