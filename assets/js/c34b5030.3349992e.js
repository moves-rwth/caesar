"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[1809],{1506:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=i(8145),t=i(4848),r=i(8453);const o={authors:"phisch",tags:["releases"]},a="Caesar 3.0: Better Reasoning with Limited Functions",l={authorsImageUrls:[void 0]},c=[{value:"Limited Functions",id:"limited-functions",level:2},{value:"Other SMT-related Improvements",id:"other-smt-related-improvements",level:2},{value:"Other Improvements",id:"other-improvements",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Caesar 3.0"})," improves the SMT reasoning capabilities of Caesar, making verification more powerful, stable, and predictable.\nThis release marks the conclusion of a project that started more than 9 months ago, including a successful Master's thesis by Emil-Beothy Elo."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Overview:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/blog/2025/07/29/caesar-3-0#limited-functions",children:"Limited Functions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/blog/2025/07/29/caesar-3-0#other-smt-related-improvements",children:"Other SMT-related Improvements"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/blog/2025/07/29/caesar-3-0#other-improvements",children:"Other Improvements"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"limited-functions",children:"Limited Functions"}),"\n",(0,t.jsxs)(n.p,{children:["The most important change in Caesar 3.0 is the introduction of ",(0,t.jsx)(n.em,{children:"limited functions"}),", which are enabled by default.\nThis is a change in how ",(0,t.jsxs)(n.a,{href:"/docs/heyvl/domains#definitional-functions",children:[(0,t.jsx)(n.em,{children:"definitional"})," ",(0,t.jsx)(n.code,{children:"func"})]}),' are translated into SMT.\nWhereas we previously translated definitional functions by using the "obvious" encoding, as uninterpreted functions and an axiom for its definition, we now guide the SMT solver by encoding ',(0,t.jsx)(n.em,{children:"fuel"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Prior to this change, ",(0,t.jsx)(n.code,{children:"coupon-collector"})," benchmark manually encoded this idea as part of a series of declarations to define harmonic numbers:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"func harmonic(n: UInt): UReal\nfunc harmonic0(n: UInt): UReal\naxiom harmonic_def forall n: UInt.\n    (harmonic(n) == ite(n==0, 0, (1/n) + harmonic0(n-1)))\naxiom harmonic_zero forall n: UInt.\n    (harmonic(n) >= 0)\naxiom harmonic0_zero forall n: UInt.\n    (harmonic0(n) >= 0)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, we simply write:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-heyvl",children:"func harmonic(n: UInt) : UReal = ite(n==0, 0, (1/n) + harmonic(n-1))\n"})}),"\n",(0,t.jsx)(n.p,{children:"and Caesar does the rest automatically, with additional improvements:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Caesar generates appropriate ",(0,t.jsx)(n.a,{href:"/docs/heyvl/domains#triggers",children:"triggers"})," to guide the SMT solver."]}),"\n",(0,t.jsxs)(n.li,{children:["Caesar generates an additional ",(0,t.jsx)(n.em,{children:"synonym axiom"}),", which is actually crucial to prevent ",(0,t.jsx)(n.em,{children:"spurious counter-examples"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Our implementation supports a wide variety of options, which are documented in the ",(0,t.jsx)(n.a,{href:"/docs/caesar/debugging/#function-encodings-and-limited-functions",children:"debugging documentation"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Function Encodings"}),", can be set via the ",(0,t.jsx)(n.code,{children:"--function-encoding"})," command-line option:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"axiomatic"}),":"]})," The old encoding, which naively encodes the function as an uninterpreted function and adds an axiom for its definition."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"decreasing"}),":"]})," Like axiomatic encoding but only allows decreasing instantiations, where the defining axiom is only instantiated based on occurrences of the function it defines, not other functions in the definition."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"fuel-mono"}),":"]})," Add a version of the function for each fuel value (f_0, f_1, ...) and recursive calls decrease the fuel value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"fuel-param"})})," (default): Add a symbolic fuel parameter to the function."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"define-fun-rec"}),":"]})," Uses ",(0,t.jsxs)(n.a,{href:"https://microsoft.github.io/z3guide/docs/logic/Recursive%20Functions/",children:["SMT-LIB's ",(0,t.jsx)(n.code,{children:"define-fun-rec"})]})," to encode functions."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fuel Values:"})," The fuel-based encodings allow the user to specify a maximum fuel value via the ",(0,t.jsx)(n.code,{children:"--max-fuel"})," command-line option. The default is 2."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Literals:"})," The ",(0,t.jsx)(n.code,{children:"fuel-mono"})," and ",(0,t.jsx)(n.code,{children:"fuel-param"})," encodings have variants that additionally allow unbounded computations in the SMT solver with ",(0,t.jsx)(n.em,{children:"literal"})," values."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Quantifier Instantiation Strategies:"})," Users can now disable MBQI with ",(0,t.jsx)(n.code,{children:"--qi e-matching"}),". When combined with the fuel-based encodings, we have ",(0,t.jsx)(n.em,{children:"termination guarantee"})," for the quantifier instantiation strategy."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Synonym Axiom:"})," The ",(0,t.jsx)(n.code,{children:"--no-synonym-axiom"})," command-line option can be used to disable the generation of the synonym axiom. This might lead to ",(0,t.jsx)(n.em,{children:"spurious counter-examples"})," (unsound!), but sometimes this is acceptable or even desired."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We also support the use of limited functions in combination with ",(0,t.jsx)(n.em,{children:"uninterpreted"})," functions.\nFor this, we added a new ",(0,t.jsxs)(n.a,{href:"/docs/heyvl/domains#computable-annotation",children:[(0,t.jsx)(n.code,{children:"@computable"})," annotation"]}),", which can be used to mark uninterpreted functions that are computable when given ",(0,t.jsx)(n.em,{children:"literal"})," parameters."]}),"\n",(0,t.jsxs)(n.p,{children:["These changes were made possible by the work of Emil-Beothy Elo in his Master's thesis and his ",(0,t.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/pull/54",children:"pull request #54"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"other-smt-related-improvements",children:"Other SMT-related Improvements"}),"\n",(0,t.jsxs)(n.p,{children:["Caesar now performs ",(0,t.jsx)(n.strong,{children:"dependency tracking"})," for SMT queries\u2014meaning it analyzes which declarations (such as functions, axioms, and domains) are actually needed for each verification task and only includes those in the SMT query \u2014 reducing the number of declarations sent to the SMT solver.\nPreviously, Caesar would send ",(0,t.jsx)(n.em,{children:"all"})," declarations in the HeyVL file to the SMT solver, which could cause performance issues even when these declarations were irrelevant to the current verification task.\nThis optimization is particularly beneficial when verifying individual procedures in files containing declarations that could interfere with counter-example generation.\nNow, only declarations that are actually relevant to the specific verification task are included in SMT queries."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["As a side-effect, we now ",(0,t.jsx)(n.em,{children:"disallow"})," axioms that do not mention any domain or func, as these would never be included in SMT queries.\nIf such an axiom is present, Caesar will emit an error indicating that the axiom is ignored because it is not relevant to any verification task."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We ",(0,t.jsx)(n.strong,{children:"updated Z3 to version 4.15.1"}),", and now set Z3's ",(0,t.jsx)(n.code,{children:"smt.arith.nl.order"})," to ",(0,t.jsx)(n.code,{children:"false"}),".\nMany other Z3 options have been tweaked to improve quantifier instantiation stability and performance."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["We now set the default quantifier weight to ",(0,t.jsx)(n.code,{children:"1"})," instead of ",(0,t.jsx)(n.code,{children:"0"}),", which now aligns with the defaults used by other SMT solver integrations and APIs."]}),"\n",(0,t.jsx)(n.li,{children:"Caesar now emits quantifier IDs for all quantifiers, making it easier to trace and debug quantifier instantiations in SMT solver outputs."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Caesar 3.0 adds some ",(0,t.jsx)(n.strong,{children:"new debugging tools"})," for Z3's SMT reasoning."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--z3-seed"})," allows users to set a seed for Z3. This is useful for debugging verification brittleness."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--z3-qi-profile"})," will print Z3's quantifier instantiation statistics to the console."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--z3-mbqi-trace"})," will print Z3's model-based quantifier instantiation trace to the console."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--z3-verbose"})," allows users to set Z3's verbosity level."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"other-improvements",children:"Other Improvements"}),"\n",(0,t.jsxs)(n.p,{children:["This release also features rewritten documentation for ",(0,t.jsx)(n.a,{href:"/docs/proof-rules/induction",children:"the induction-based proof rules"})," and minor improvements in various other places."]}),"\n",(0,t.jsx)(n.p,{children:"We re-organized and extended the test suite, so that we now regularly run more than 150 tests in CI."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8145:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/07/29/caesar-3-0","editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/blog/2025-07-29-caesar-3-0.md","source":"@site/blog/2025-07-29-caesar-3-0.md","title":"Caesar 3.0: Better Reasoning with Limited Functions","description":"Caesar 3.0 improves the SMT reasoning capabilities of Caesar, making verification more powerful, stable, and predictable.","date":"2025-07-29T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":4.72,"hasTruncateMarker":true,"authors":[{"name":"Philipp Schroer","title":"Caesar Developer","url":"https://moves.rwth-aachen.de/people/philipp-schroer/","imageURL":"https://github.com/Philipp15b.png","key":"phisch","page":null}],"frontMatter":{"authors":"phisch","tags":["releases"]},"unlisted":false,"nextItem":{"title":"Caesar at Summer School for Formal Techniques \'25","permalink":"/blog/2025/06/10/caesar-at-ssft-25"}}')},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);