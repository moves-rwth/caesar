"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[7497],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:10},l="OOPSLA '23 Artifact Evaluation Guide",o={unversionedId:"OOPSLA_AEC",id:"OOPSLA_AEC",title:"OOPSLA '23 Artifact Evaluation Guide",description:'Welcome to the artifact for our OOPSLA \'23 submission "A Deductive Verification Infrastructure for Probabilistic Programs".',source:"@site/docs/OOPSLA_AEC.md",sourceDirName:".",slug:"/OOPSLA_AEC",permalink:"/docs/OOPSLA_AEC",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/OOPSLA_AEC.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docsSidebar",previous:{title:"Publications",permalink:"/docs/publications"},next:{title:"pGCL Frontend",permalink:"/docs/pgcl"}},p={},s=[{value:"Contents",id:"contents",level:2},{value:"1. Getting Started",id:"1-getting-started",level:2},{value:"2. Piece by Piece: How Our Artifact Supports the Paper&#39;s Claims",id:"2-piece-by-piece-how-our-artifact-supports-the-papers-claims",level:2},{value:"2.1. Running Our Benchmarks",id:"21-running-our-benchmarks",level:3},{value:"2.2. The Caesar Tool and Its Source Code",id:"22-the-caesar-tool-and-its-source-code",level:3},{value:"2.3. pgcl2heyvl: Generating HeyVL Files From pGCL",id:"23-pgcl2heyvl-generating-heyvl-files-from-pgcl",level:3},{value:"3.1. From pGCL to HeyVL",id:"31-from-pgcl-to-heyvl",level:2},{value:"3.2. Verifying HeyVL Files With Caesar",id:"32-verifying-heyvl-files-with-caesar",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"oopsla-23-artifact-evaluation-guide"},"OOPSLA '23 Artifact Evaluation Guide"),(0,r.kt)("p",null,"Welcome to the artifact for our OOPSLA '23 submission ",(0,r.kt)("em",{parentName:"p"},'"A Deductive Verification Infrastructure for Probabilistic Programs"'),"."),(0,r.kt)("p",null,"Contained within the artifact:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Our tool ",(0,r.kt)("em",{parentName:"li"},"Caesar"),", which parses HeyVL programs and tries to verify them. Caesar constitutes our main implementation contribution and is the focus of this artifact.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A script to reproduce our benchmarks (Table 2)."))),(0,r.kt)("li",{parentName:"ul"},"We also include our prototypical tool ",(0,r.kt)("em",{parentName:"li"},"pgcl2heyvl"),", which takes pGCL programs with annotations and produces a HeyVL file that encodes the required proof obligations."),(0,r.kt)("li",{parentName:"ul"},"Our full source code is contained within the artifact as well.")),(0,r.kt)("h2",{id:"contents"},"Contents"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Getting Started"),(0,r.kt)("li",{parentName:"ol"},"Piece by Piece: How Our Artifact Supports the Paper's Claims",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Running Our Benchmarks"),(0,r.kt)("li",{parentName:"ol"},"The Caesar Tool and Its Source Code"),(0,r.kt)("li",{parentName:"ol"},"pgcl2heyvl: Generating HeyVL Files From pGCL"))),(0,r.kt)("li",{parentName:"ol"},"A Guide to Custom Examples"),(0,r.kt)("li",{parentName:"ol"},"Appendix: Accepted pGCL Syntax by the pglc2heyvl Tool")),(0,r.kt)("h2",{id:"1-getting-started"},"1. Getting Started"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Requirements.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker"),", and provide images for both x86 and ARM architectures."),(0,r.kt)("li",{parentName:"ul"},"16 GB of RAM, enough disk space for the artifact."),(0,r.kt)("li",{parentName:"ul"},"Our benchmark set should terminate in under 10 minutes."),(0,r.kt)("li",{parentName:"ul"},"Note: We provide an x86 Docker image. On ARM machines, Docker will run it in a virtual machine and will print a warning. In these setups, we have observed a slowdown of about 10x.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Downloading the artifact."),"\nEither ",(0,r.kt)("a",{parentName:"p",href:"https://zenodo.org/record/8146987"},"download from Zenodo")," and then run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker image load -i caesar.tar.gz"),"."),(0,r.kt)("p",null,"Alternatively, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Philipp15b/caesar/pkgs/container/caesar"},"via Github packages"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ghcr.io/philipp15b/caesar:oopsla23-aec --platform linux/amd64\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Entering the artifact environment."),"\nSimply run the ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," image with Docker.\nThis will open a ",(0,r.kt)("inlineCode",{parentName:"p"},"bash")," shell in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/root/caesar")," directory with the ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl")," commands available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it ghcr.io/philipp15b/caesar:oopsla23-aec\n")),(0,r.kt)("p",null,"The image is based on on Debian Bullseye (slim), so the ",(0,r.kt)("inlineCode",{parentName:"p"},"apt")," package manager is available.\nThe editors ",(0,r.kt)("inlineCode",{parentName:"p"},"vim")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nano")," are installed already."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Running the benchmarks."),"\nTo reproduce our benchmarks (Table 2), execute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"fish run-benchmarks.fish\n")),(0,r.kt)("p",null,"The script will run the list of benchmarks specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"benchmarks.txt")," in sequence (usually in < 10min).\nAfter completion, the results will be printed as an ASCII table to the terminal as well to the CSV file ",(0,r.kt)("inlineCode",{parentName:"p"},"benchmark-results.csv"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Documentation.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We provide more detailed usage and syntax instructions in our documentation. It is ",(0,r.kt)("a",{parentName:"li",href:"https://www.caesarverifier.org"},"available online")," and the source code can be found in ",(0,r.kt)("inlineCode",{parentName:"li"},"docs/src")," (Markdown files)."),(0,r.kt)("li",{parentName:"ul"},"Caesar has Rustdoc documentation, but we do not include the generated files or the Rust compiler in this artifact.")),(0,r.kt)("h2",{id:"2-piece-by-piece-how-our-artifact-supports-the-papers-claims"},"2. Piece by Piece: How Our Artifact Supports the Paper's Claims"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Section 5.2")," of our paper states our key claims with respect to this artifact."),(0,r.kt)("p",null,"In this document,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Section 2.1.")," explains how to run our benchmarks (Table 2)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Section 2.3.")," explains how to automatically generate HeyVL files using our prototypical frontend pgcl2heyvl.")),(0,r.kt)("h3",{id:"21-running-our-benchmarks"},"2.1. Running Our Benchmarks"),(0,r.kt)("p",null,"To reproduce our benchmarks (Table 2), execute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"fish run-benchmarks.fish\n")),(0,r.kt)("p",null,"The script will run the list of benchmarks specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"benchmarks.txt")," in sequence.\nAfter completion (usually in < 10min), the results will be printed as an ASCII table to the terminal as well to the CSV file ",(0,r.kt)("inlineCode",{parentName:"p"},"benchmark-results.csv"),"."),(0,r.kt)("p",null,"Note: To allow reproducing results on slower machines and virtualized environments, we increased the timeout for each benchmark from 10s to 60s."),(0,r.kt)("h3",{id:"22-the-caesar-tool-and-its-source-code"},"2.2. The Caesar Tool and Its Source Code"),(0,r.kt)("p",null,"Our tool is available as the ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," command.\nThe source code is in the entry directory (",(0,r.kt)("inlineCode",{parentName:"p"},"/root/caesar"),").\nIn particular, the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"z3rro")," directories are relevant.\nBoth are documented using Rust doc comments."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Running Caesar directly."),"\nIt can be executed with ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar [filename]")," where the file contains a HeyVL program.\nOur benchmarks can be found in the following directories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pgcl/examples-heyvl"),": This directory contains the 85% of our benchmarks which were automatically generated using pgcl2heyvl."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tests"),": This directory contains remaining 15% of the benchmarks which are hand-written HeyVL files (cf. Section 5.2 in our paper).")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--timeout [SECONDS]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--mem [MEGABYTES]")," command-line options are useful to set runtime and memory limits."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"HeyVL Syntax."),"\nCaesar accepts a modified version of our syntax from the paper.\nWe refer to our documentation section on the language: ",(0,r.kt)("a",{parentName:"p",href:"https://moves-rwth.github.io/caesar/heyvl/index.html"},"It is online"),", and contained in the artifact in ",(0,r.kt)("inlineCode",{parentName:"p"},"docs/src/heyvl"),".\nExample HeyVL files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl/examples")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/")," directories."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"VSCode extension for syntax highlighting."),"\nWe have a VSCode extension for HeyVL syntax highlighting.\nSee ",(0,r.kt)("inlineCode",{parentName:"p"},"vscode-ext/README.md")," for installation instructions.\nYou might need to do this outside of your Docker container, so run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker cp CONTAINER:/root/caesar/vscode-ext $PWD")," to copy the directory out of the container and then run the installation."),(0,r.kt)("p",null,"We recommend using this extension with a ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/remote/advancedcontainers/develop-remote-host"},"VSCode Remote connection to the Docker container")," when editing HeyVL files for convenience."),(0,r.kt)("h3",{id:"23-pgcl2heyvl-generating-heyvl-files-from-pgcl"},"2.3. pgcl2heyvl: Generating HeyVL Files From pGCL"),(0,r.kt)("p",null,"This pGCL frontend is available as the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl")," command.\nIts source code is provided in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl/pgcl2heyvl")," directory as a ",(0,r.kt)("a",{parentName:"p",href:"https://python-poetry.org/"},"Poetry")," package."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Automatically generated benchmarks."),"\nIn our paper, we claim that 85% of our benchmarks are automatically generated from pGCL code.\nThese pGCL examples are located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl/examples")," directory."),(0,r.kt)("p",null,"The corresponding generated HeyVL files are located in ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl/examples-heyvl"),".\nWe already generated all these HeyVL files with pgcl2heyvl."),(0,r.kt)("p",null,"In order to reproduce the process of automatically generating the HeyVL files, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rm pgcl/examples-heyvl/*.heyvl # delete existing files\nfish pgcl/examples-heyvl/generate.fish # generate files\n")),(0,r.kt)("p",null,"See Section 2.2. for how to run the individual HeyVL files with Caesar."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Details."),"\npgcl2heyvl parses pGCL programs in the syntax accepted by the ",(0,r.kt)("a",{parentName:"p",href:"https://philipp15b.github.io/probably/"},"probably")," Python package.\nSee the last section of this file for the grammar of pGCL programs."),(0,r.kt)("p",null,"At the top of every file must be a comment of the style"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-heyvl"},"// ARGS: --encoding ... --pre ... --post ...\n")),(0,r.kt)("p",null,"according to the CLI documentation of the pgcl2heyvl tool (run ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl2heyvl --help"),")."),(0,r.kt)("h1",{id:"3-a-guide-to-custom-examples"},"3. A Guide To Custom Examples"),(0,r.kt)("p",null,"We will look at our ",(0,r.kt)("inlineCode",{parentName:"p"},"geo1")," example to see how you can create your own examples for pgcl2heyvl and Caesar."),(0,r.kt)("h2",{id:"31-from-pgcl-to-heyvl"},"3.1. From pGCL to HeyVL"),(0,r.kt)("p",null,"There is a pGCL file for ",(0,r.kt)("inlineCode",{parentName:"p"},"geo1")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"pgcl/examples/geo1.pgcl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// ARGS: --encoding "encode-k-induction" --calculus "wp" --post c --pre "c+1" --k 2\n\nnat c;\nnat f;\n\nwhile(f=1){\n   {f := 0}[0.5]{c := c+1}\n}\n')),(0,r.kt)("p",null,"pgcl2heyvl can be used to create a corresponding HeyVL file that uses the annotations in the first line to prove that ",(0,r.kt)("inlineCode",{parentName:"p"},"wp[geo1](c) <= c+1")," holds using ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"-induction with ",(0,r.kt)("inlineCode",{parentName:"p"},"k=2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pgcl2heyvl pgcl/examples/geo1.pgcl > mygeo.heyvl\n")),(0,r.kt)("p",null,"This will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"mygeo.heyvl")," file."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Things to Try:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"pre")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"c+2"),". This is still a valid upper bound (and the HeyVL file should verify.)"),(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"pre")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"c"),". This is ",(0,r.kt)("em",{parentName:"li"},"not")," a valid upper bound (and Caesar should give a counter-example later).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:"),"\npgcl2heyvl has a slighly different syntax for programs than Caesar accepts.\nIt also does not accept domain declarations (including user-defined functions and axioms).\nWe are working on a more convenient implementation."),(0,r.kt)("h2",{id:"32-verifying-heyvl-files-with-caesar"},"3.2. Verifying HeyVL Files With Caesar"),(0,r.kt)("p",null,"Simply run ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," with your new file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"caesar mygeo.heyvl\n")),(0,r.kt)("p",null,"and it prints that the main generated ",(0,r.kt)("inlineCode",{parentName:"p"},"coproc")," either verifies or not (depending on your modifications)."),(0,r.kt)("p",null,"You can of course create HeyVL files directly.\nTo encode loops, use the encodings detailed in the appendix of our paper."),(0,r.kt)("h1",{id:"4-appendix-accepted-syntax-by-the-pgcl2heyvl-tool"},"4. Appendix: Accepted Syntax by the pgcl2heyvl Tool"),(0,r.kt)("p",null,"An excerpt from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lark-parser/lark"},"Lark")," grammar for pGCL programs used in the probably library:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'declaration: "bool" var                  -> bool\n            | "nat" var bounds?           -> nat\n            | "const" var ":=" expression -> const\n\nbounds: "[" expression "," expression "]"\n\ninstruction: "skip"                                      -> skip\n           | "while" "(" expression ")" block            -> while\n           | "if" "(" expression ")" block "else"? block -> if\n           | var ":=" rvalue                             -> assign\n           | block "[" expression "]" block              -> choice\n           | "tick" "(" expression ")"                   -> tick\n\nrvalue: "unif" "(" expression "," expression ")" -> uniform\n      | expression\n\nliteral: "true"  -> true\n       | "false" -> false\n       | INT     -> nat\n       | FLOAT   -> float\n       | "\u221e"     -> infinity\n       | "\\infty" -> infinity\n')),(0,r.kt)("p",null,"Expressions in programs and expectations can be built from the following operators, grouped by precedence:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"||"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"&")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"=")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"-")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"li"},":")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"/")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"not "),", ",(0,r.kt)("inlineCode",{parentName:"li"},"( ... )"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"[ ... ]"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"literal"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"var"))),(0,r.kt)("p",null,"Whitespace is generally ignored."))}m.isMDXComponent=!0}}]);