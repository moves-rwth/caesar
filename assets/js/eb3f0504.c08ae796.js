"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[8773],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?o.createElement(h,r(r({ref:n},c),{},{components:t})):o.createElement(h,r({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2472:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=t(7462),a=(t(7294),t(3905));const i={title:"Loop Unrolling",description:"Loop unrolling and bounded model checking.",sidebar_position:3},r="Loop Unrolling and Bounded Model Checking",l={unversionedId:"proof-rules/unrolling",id:"proof-rules/unrolling",title:"Loop Unrolling",description:"Loop unrolling and bounded model checking.",source:"@site/docs/proof-rules/unrolling.md",sourceDirName:"proof-rules",slug:"/proof-rules/unrolling",permalink:"/docs/proof-rules/unrolling",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/proof-rules/unrolling.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Loop Unrolling",description:"Loop unrolling and bounded model checking.",sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Induction and k-Induction",permalink:"/docs/proof-rules/induction"},next:{title:"\u03c9-Invariants",permalink:"/docs/proof-rules/omega-invariants"}},p={},s=[{value:"Usage",id:"usage",level:2},{value:"Verification Example",id:"verification-example",level:2},{value:"Refutation (Bounded Model Checking)",id:"bounded-model-checking",level:2},{value:"Soundness",id:"soundness",level:2}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loop-unrolling-and-bounded-model-checking"},"Loop Unrolling and Bounded Model Checking"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Loop unrolling")," (also known as ",(0,a.kt)("em",{parentName:"p"},"fixpoint iteration")," or ",(0,a.kt)("em",{parentName:"p"},"Kleene iteration"),") replaces a ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," loop by a fixed number of iterations ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," and a ",(0,a.kt)("em",{parentName:"p"},"terminator")," expectation to be used if more than ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," iterations run.\nThis simple proof rule does not require invariants, just a choice of how many loop iterations to be done.\nThe necessary terminator is usually clear from the context."),(0,a.kt)("p",null,"Just like all others of Caesar's proof rules, loop unrolling can be used as a proof rule for verification.\nBut it also often used in ",(0,a.kt)("em",{parentName:"p"},"bounded model checking")," not to ",(0,a.kt)("em",{parentName:"p"},"prove"),", but to ",(0,a.kt)("em",{parentName:"p"},"refute")," specifications.\nSee the ",(0,a.kt)("a",{parentName:"p",href:"#bounded-model-checking"},(0,a.kt)("em",{parentName:"a"},"Bounded Model Checking")," section")," below for details."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"while")," loop is annotated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"@unroll(k, terminator)")," annotation where ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," is a number literal and ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator")," is an expression of type ",(0,a.kt)("inlineCode",{parentName:"p"},"EUReal"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator")," should be the initial value of the fixpoint iteration.\nThus, one chooses the ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator")," to encode the loop unrolling such that it either"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"over-approximates greatest fixed-point semantics:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"commonly ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," for the one-bounded wlp semantics,"),(0,a.kt)("li",{parentName:"ul"},"or ",(0,a.kt)("inlineCode",{parentName:"li"},"\\infty")," for the unbounded expectation-based semantics."))),(0,a.kt)("li",{parentName:"ul"},"under-approximates least fixed-point semantics:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"commonly ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," for expectation-based semantics (wp, ert).")))),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"#soundness"},"section on soundness")," below."),(0,a.kt)("h2",{id:"verification-example"},"Verification Example"),(0,a.kt)("p",null,"In the simple example below, we show a lower bound of ",(0,a.kt)("inlineCode",{parentName:"p"},"0.75")," on the probability value of termination in at most 3 iterations of the loop.\nWe want to encode a loop with least fixed-point semantics, so we use ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," as our ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"@wp proc geo1_unroll() -> (c: UInt)\n    pre 0.75\n    post 1\n{\n    c = 0\n    var cont: Bool = true\n    @unroll(3, 0) // k = 3, terminator = 0\n    while cont {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice { cont = false } else { c = c + 1 }\n    }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/docs/proof-rules/calculi"},(0,a.kt)("inlineCode",{parentName:"a"},"@wp")," annotation")," annotation adds a sanity check from Caesar that we correctly reason about ",(0,a.kt)("em",{parentName:"p"},"weakest pre-expectations"),"."),(0,a.kt)("p",null,"Internally, the loop is replaced by its unfolding, with a ",(0,a.kt)("inlineCode",{parentName:"p"},"assert 0; assume 0")," at the end of the ",(0,a.kt)("inlineCode",{parentName:"p"},"k = 3")," loop iterations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"if cont {\n    ... body ...\n    if cont {\n        ... body ...\n        if cont {\n            ... body ...\n            assert 0; assume 0 // terminator = 0\n        }\n    }\n}\n")),(0,a.kt)("p",null,"There is a ",(0,a.kt)("inlineCode",{parentName:"p"},"0.25")," chance of reaching the ",(0,a.kt)("inlineCode",{parentName:"p"},"assert 0"),", so we can at most prove a lower bound of ",(0,a.kt)("inlineCode",{parentName:"p"},"0.75")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"k = 3"),"."),(0,a.kt)("p",null,"Notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"k = 3")," generates three ",(0,a.kt)("inlineCode",{parentName:"p"},"if cont { ... }")," statements, but that the last body has essentially constant zero semantics due to the ",(0,a.kt)("inlineCode",{parentName:"p"},"assert 0")," at the end.\nSo we get probability mass from the first ",(0,a.kt)("em",{parentName:"p"},"two")," iterations only (",(0,a.kt)("inlineCode",{parentName:"p"},"0.5 + 0.25"),")."),(0,a.kt)("h2",{id:"bounded-model-checking"},"Refutation (Bounded Model Checking)"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Bounded model checking")," (BMC) is what we usually call using loop unrolling when we ",(0,a.kt)("em",{parentName:"p"},"refute")," a specification with it.\nThe idea is that if a specification does not hold e.g. for 12 loop steps, then we can guarantee that it still will not hold for more potential loop steps."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Bounded model checking is a technique for refuting verification (if there is a counter-example, it is valid for the original program) but can make successful verification unsound (if the program verifies, we know nothing).")),(0,a.kt)("p",null,"In the following example, we use loop unrolling to ",(0,a.kt)("em",{parentName:"p"},"under-approximate")," least fixed-point semantics in an ",(0,a.kt)("em",{parentName:"p"},"upper-bound context")," (",(0,a.kt)("inlineCode",{parentName:"p"},"coproc"),").\nBecause we want to approximate least fixpoint semantics, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," as our ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator"),"."),(0,a.kt)("p",null,"Because loop unrolling ",(0,a.kt)("em",{parentName:"p"},"under-approximates")," the least fixed-point, we know that if verification of an ",(0,a.kt)("em",{parentName:"p"},"upper bound fails"),", then we have refuted the upper bound.\nOn the other hand, if verification succeeds, we cannot conclude that the specification holds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-heyvl"},"coproc geo1_bmc(init_c: UInt) -> (c: UInt)\n    pre init_c + 0.99\n    post c\n{\n    c = init_c\n    var cont: Bool = true\n    @unroll(12, 0) // k = 12, terminator = 0\n    while cont {\n        var prob_choice: Bool = flip(0.5)\n        if prob_choice { cont = false } else { c = c + 1 }\n    }\n}\n")),(0,a.kt)("p",null,"Trying to verify ",(0,a.kt)("inlineCode",{parentName:"p"},"geo1_unroll")," will yield a counter-example to verification.\nBecause this is loop unrolling, it is a ",(0,a.kt)("em",{parentName:"p"},"true counter-example")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"init_c + 0.99")," being an upper bound.\nOn the other hand, if you change ",(0,a.kt)("inlineCode",{parentName:"p"},"k = 11"),", then the program verifies.\nBut this tells you nothing about the actual program semantics."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Remember that correctness of encoding BMC here depends on the fact that we encoded a sound under-approximation on a least fixpoint in a ",(0,a.kt)("inlineCode",{parentName:"p"},"coproc"),".\nIf you over-approximate in this program, e.g. using additional ",(0,a.kt)("inlineCode",{parentName:"p"},"coassert")," statements or ",(0,a.kt)("inlineCode",{parentName:"p"},"coproc")," calls, then you might get spurious counterexamples again.\nThen BMC would be useless!")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@unroll")," annotation only provides a sound under-approximation for the ",(0,a.kt)("inlineCode",{parentName:"p"},"wp")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ert")," calculi and only a sound over-approximation for ",(0,a.kt)("inlineCode",{parentName:"p"},"wlp")," (cf. ",(0,a.kt)("a",{parentName:"p",href:"/docs/proof-rules/calculi"},"calculus annotations"),").\nThe calculus annotations check ",(0,a.kt)("em",{parentName:"p"},"soundness")," in the limited sense that verification implies that the specification holds for the original program.\nTherefore, the calculus annotations would ",(0,a.kt)("em",{parentName:"p"},"not allow")," the above combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"coproc")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@wp")," annotation."),(0,a.kt)("p",{parentName:"admonition"},"However, here it is still correct to ",(0,a.kt)("em",{parentName:"p"},"under-approximate")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"wp")," and then conclude from a counter-example of an ",(0,a.kt)("em",{parentName:"p"},"upper bound")," (",(0,a.kt)("inlineCode",{parentName:"p"},"coproc"),") that the upper bound is not valid for the original program!\nBut calculus annotations do not support the task of checking for sound ",(0,a.kt)("em",{parentName:"p"},"refutations")," yet.")),(0,a.kt)("h2",{id:"soundness"},"Soundness"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://link.springer.com/chapter/10.1007/978-3-030-81688-9_25"},(0,a.kt)("em",{parentName:"a"},"Latticed k-Induction with an Application to Probabilistic Programs"))," (CAV 2021) for more information on the theory of ",(0,a.kt)("em",{parentName:"p"},"bounded model checking")," on probabilistic programs."),(0,a.kt)("p",null,"One needs to be very careful in choosing the ",(0,a.kt)("inlineCode",{parentName:"p"},"terminator")," such that ",(0,a.kt)("inlineCode",{parentName:"p"},"@unroll")," actually approximates the correct fixed-point corresponding to the desired semantics (see ",(0,a.kt)("a",{parentName:"p",href:"#usage"},"Usage"),")."),(0,a.kt)("p",null,"Notice that you ",(0,a.kt)("strong",{parentName:"p"},"cannot")," ",(0,a.kt)("em",{parentName:"p"},"under-approximate a greatest fixed-point semantics")," or ",(0,a.kt)("em",{parentName:"p"},"over-approximate a least fixed-point semantics")," with loop unrolling, in contrast to the other proof rules such as ",(0,a.kt)("a",{parentName:"p",href:"/docs/proof-rules/induction"},"induction"),"."))}m.isMDXComponent=!0}}]);