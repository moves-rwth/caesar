"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[5782],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,b=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(b,i(i({ref:t},u),{},{components:n})):a.createElement(b,i({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:2},i="Number Types",s={unversionedId:"stdlib/numbers",id:"stdlib/numbers",title:"Number Types",description:"Caesar supports a variety of unbounded numerical types.",source:"@site/docs/stdlib/numbers.md",sourceDirName:"stdlib",slug:"/stdlib/numbers",permalink:"/docs/stdlib/numbers",draft:!1,editUrl:"https://github.com/moves-rwth/caesar/tree/main/website/docs/stdlib/numbers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Booleans",permalink:"/docs/stdlib/booleans"},next:{title:"Lists",permalink:"/docs/stdlib/lists"}},o={},p=[{value:"Mathematical Number Types",id:"mathematical-number-types",level:2},{value:"UInt",id:"uint",level:3},{value:"Int",id:"int",level:3},{value:"UReal",id:"ureal",level:3},{value:"Real",id:"real",level:3},{value:"EUReal",id:"eureal",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"number-types"},"Number Types"),(0,r.kt)("p",null,"Caesar supports a variety of unbounded numerical types."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/heyvl/expressions"},"expressions documentiation")," has a list of Caesar's numerical operators.\nThe following diagram illustrates the hierarchy of numeric types supported by Caesar."),(0,r.kt)("p",null,"An arrow from a type to another type indicates that it is a ",(0,r.kt)("em",{parentName:"p"},"subtype")," and that a value can be converted into the supertype.\nThis is done automatically by Caesar when appropriate."),(0,r.kt)("mermaid",{value:"graph\n    UInt --\x3e Int;\n    UInt --\x3e UReal;\n    Int --\x3e Real;\n    UReal --\x3e Real;\n    UReal --\x3e EUReal;\n    UInt --\x3e EUReal;\n"}),(0,r.kt)("h2",{id:"mathematical-number-types"},"Mathematical Number Types"),(0,r.kt)("p",null,"Caesar supports various number types that are not restricted by a finite bit size.\nTherefore, all of these types have infinitely many values."),(0,r.kt)("h3",{id:"uint"},"UInt"),(0,r.kt)("p",null,"Unsigned integers, i.e. values ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", and so on."),(0,r.kt)("small",null,"This type was previously called `Uint`. For the moment, Caesar also accepts this name."),(0,r.kt)("h3",{id:"int"},"Int"),(0,r.kt)("p",null,"Signed integers."),(0,r.kt)("h3",{id:"ureal"},"UReal"),(0,r.kt)("p",null,"Unsigned real numbers, i.e. values x \u2208 \u211d such that x \u2265 0."),(0,r.kt)("p",null,"This is the type of fraction expressions ",(0,r.kt)("inlineCode",{parentName:"p"},"a/b")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," are unsigned integer literals, as well as decimals such as ",(0,r.kt)("inlineCode",{parentName:"p"},"3.14"),"."),(0,r.kt)("h3",{id:"real"},"Real"),(0,r.kt)("p",null,"Actual real numbers!"),(0,r.kt)("h3",{id:"eureal"},"EUReal"),(0,r.kt)("p",null,"Extended unsigned real numbers.\nThis type includes all values from the ",(0,r.kt)("inlineCode",{parentName:"p"},"UReal")," type and also allows the value ",(0,r.kt)("inlineCode",{parentName:"p"},"\u221e"),"."),(0,r.kt)("p",null,"This type admits a Heyting algebra and can be used as a verification domain."),(0,r.kt)("small",null,"This type was previously called ",(0,r.kt)("code",null,"Realplus"),". For the moment, Caesar also accepts this name."))}d.isMDXComponent=!0}}]);