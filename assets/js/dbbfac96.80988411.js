"use strict";(self.webpackChunkcaesar_website=self.webpackChunkcaesar_website||[]).push([[6128],{3052:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"pgcl","title":"pgcl2heyvl Frontend","description":"The now deprecated pgcl2heyvl tool is a frontend for pGCL programs written in the syntax of the probably library","source":"@site/docs/pgcl.md","sourceDirName":".","slug":"/pgcl","permalink":"/docs/pgcl","draft":false,"unlisted":false,"editUrl":"https://github.com/moves-rwth/caesar/tree/main/website/docs/pgcl.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"docsSidebar","previous":{"title":"OOPSLA \'23 Artifact Evaluation Guide","permalink":"/docs/OOPSLA_AEC"}}');var i=s(4848),l=s(8453);const t={sidebar_position:11},c="pgcl2heyvl Frontend",a={},o=[{value:"Installing pgcl2heyvl",id:"installing-pgcl2heyvl",level:2},{value:"Using pgcl2heyvl",id:"using-pgcl2heyvl",level:2},{value:"pGCL Examples",id:"pgcl-examples",level:2},{value:"pGCL Syntax",id:"pgcl-syntax",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pgcl2heyvl-frontend",children:"pgcl2heyvl Frontend"})}),"\n",(0,i.jsxs)(n.p,{children:["The now deprecated ",(0,i.jsx)(n.code,{children:"pgcl2heyvl"})," tool is a frontend for pGCL programs written in the syntax of the ",(0,i.jsxs)(n.a,{href:"https://github.com/Philipp15b/probably",children:[(0,i.jsx)(n.em,{children:"probably"})," library"]}),"\nGiven an annotated pGCL program, it automatically generates HeyVL code for Caesar."]}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"pgcl2heyvl"})," tool is deprecated and its functionality is now fully integrated into Caesar itself.\nSimply use HeyVL ",(0,i.jsx)(n.a,{href:"/docs/heyvl/statements",children:"statements"})," and use the built-in ",(0,i.jsx)(n.a,{href:"/docs/proof-rules/",children:"proof rules"})," on ",(0,i.jsx)(n.code,{children:"while"})," loops."]}),(0,i.jsxs)(n.p,{children:["Using HeyVL directly enables the use of the proof rule encodings with features of Caesar that pgcl2heyvl does not support, such as ",(0,i.jsx)(n.a,{href:"/docs/heyvl/domains",children:"domain declarations"})," or a more powerful set of ",(0,i.jsx)(n.a,{href:"/docs/heyvl/expressions",children:"expressions"}),".\nFurthermore, Caesar's proof rules have support for ",(0,i.jsx)(n.a,{href:"/docs/caesar/slicing",children:"slicing"}),', which enables detailed error messages such as "the invariant is not inductive".']})]}),"\n",(0,i.jsx)(n.h2,{id:"installing-pgcl2heyvl",children:"Installing pgcl2heyvl"}),"\n",(0,i.jsxs)(n.p,{children:["To run ",(0,i.jsx)(n.code,{children:"pgcl2heyvl"}),", first install dependencies using ",(0,i.jsx)(n.a,{href:"https://python-poetry.org/",children:"poetry"}),".\nPoetry is a build system and dependency manager for Python.\n",(0,i.jsx)(n.a,{href:"https://python-poetry.org/docs/",children:"Here are installation instructions for Poetry"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsxs)(n.a,{href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/pgcl2heyvl",children:[(0,i.jsx)(n.code,{children:"pgcl/pgcl2heyvl"})," directory"]}),", install dependencies:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd pgcl/pgcl2heyvl\npoetry install\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-pgcl2heyvl",children:"Using pgcl2heyvl"}),"\n",(0,i.jsxs)(n.p,{children:["After installation, use ",(0,i.jsx)(n.code,{children:"poetry run"})," to run ",(0,i.jsx)(n.code,{children:"pgcl2heyvl"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd pgcl/pgcl2heyvl\npoetry run pgcl2heyvl FILE > OUTFILE\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where ",(0,i.jsx)(n.code,{children:"FILE"})," is a file name with the pGCL program and ",(0,i.jsx)(n.code,{children:"OUTFILE"})," is the name of the output file with the HeyVL code."]}),"\n",(0,i.jsxs)(n.p,{children:["The first line in ",(0,i.jsx)(n.code,{children:"FILE"})," must include ",(0,i.jsx)(n.code,{children:"// ARGS: --post POST --pre PRE --k K"}),".\n",(0,i.jsx)(n.code,{children:"POST"})," is a post-expectation, and ",(0,i.jsx)(n.code,{children:"PRE"})," is a pre-expectation (in ",(0,i.jsx)(n.a,{href:"#pgcl-syntax",children:"pGCL syntax"}),").\nThe ",(0,i.jsx)(n.code,{children:"K"})," argument is an integer that specifies which ",(0,i.jsx)(n.code,{children:"k"}),"-induction to use for the encoding."]}),"\n",(0,i.jsxs)(n.p,{children:["If the pGCL program includes a single loop, then ",(0,i.jsx)(n.code,{children:"PRE"})," will be used as the loop invariant.\nWhen the program includes multiple loops, additional invariants must be specified using ",(0,i.jsx)(n.code,{children:"--invariant"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The command-line interface documentation is available by invoking ",(0,i.jsx)(n.code,{children:"poetry run pgcl2heyvl --help"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"pgcl-examples",children:"pGCL Examples"}),"\n",(0,i.jsxs)(n.p,{children:["You can find pGCL examples in the ",(0,i.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/examples",children:(0,i.jsx)(n.code,{children:"pgcl/examples"})})," directory.\nThey include all necessary parameters to generate verifying HeyVL files."]}),"\n",(0,i.jsxs)(n.p,{children:["For these examples, the generated HeyVL files are located under ",(0,i.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/tree/main/pgcl/examples-heyvl",children:(0,i.jsx)(n.code,{children:"pgcl/examples-heyvl"})}),".\nVerification with ",(0,i.jsx)(n.code,{children:"caesar"})," requires the ",(0,i.jsx)(n.code,{children:"--raw"})," command-line flag since these files are just sequences of HeyVL statements."]}),"\n",(0,i.jsxs)(n.p,{children:["Instructions on how to (re-)generate these examples are located in ",(0,i.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/blob/main/pgcl/examples-heyvl/README.md",children:(0,i.jsx)(n.code,{children:"pgcl/examples-heyvl/README.md"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To execute ",(0,i.jsx)(n.code,{children:"caesar"})," with the generated HeyVL files, refer to the ",(0,i.jsx)(n.a,{href:"/docs/caesar/benchmarks",children:"benchmarks section of Caesar's documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"pgcl-syntax",children:"pGCL Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pgcl2heyvl"})," uses the ",(0,i.jsx)(n.a,{href:"https://github.com/Philipp15b/probably",children:(0,i.jsx)(n.code,{children:"probably"})})," Python library to parse and type-check pGCL programs.\nThat means the pGCL syntax of ",(0,i.jsx)(n.code,{children:"probably"})," is used for the pGCL programs and the ",(0,i.jsx)(n.code,{children:"--pre"}),", ",(0,i.jsx)(n.code,{children:"--post"}),", and ",(0,i.jsx)(n.code,{children:"--invariant"})," command-line parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["There is no formal specification for the exact pGCL syntax that ",(0,i.jsx)(n.code,{children:"probably"})," accepts, but here are some pointers:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["pGCL examples in ",(0,i.jsx)(n.a,{href:"https://github.com/moves-rwth/caesar/tree/master/pgcl/examples",children:(0,i.jsx)(n.code,{children:"pgcl/examples"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsxs)(n.a,{href:"https://philipp15b.github.io/probably/pgcl.html",children:[(0,i.jsx)(n.code,{children:"probably"})," documentation"]}),". There are many doctests with examples."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.a,{href:"https://philipp15b.github.io/probably/pgcl_grammar.html#pgcl-grammar",children:"grammar specification"})," used by ",(0,i.jsx)(n.code,{children:"probably"})," built on top of the ",(0,i.jsx)(n.a,{href:"https://github.com/lark-parser/lark",children:"Lark parsing toolkit"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"https://github.com/Philipp15b/probably/tree/master/tests",children:[(0,i.jsx)(n.code,{children:"probably"}),"'s tests"]}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);