// Auto-generated by pgcl2heyvl from refute-unif_gen1_bmc.pgcl
//
coproc main(init_elow: UInt, init_ehigh: UInt, init_n: UInt, init_v: UInt, init_c: UInt, init_running: UInt, init_i: UInt) -> (elow: UInt, ehigh: UInt, n: UInt, v: UInt, c: UInt, running: UInt, i: UInt)
    pre ([(((((((init_elow + 1) == init_ehigh) && (init_n == ((init_ehigh - init_elow) + 1))) && (init_v == 1)) && (init_c == 0)) && (init_running == 0)) && !(init_i < init_elow)) && (init_i <= init_ehigh)] * 0.49) + ([!((((((((init_elow + 1) == init_ehigh) && (init_n == ((init_ehigh - init_elow) + 1))) && (init_v == 1)) && (init_c == 0)) && (init_running == 0)) && !(init_i < init_elow)) && (init_i <= init_ehigh))] * 1)
    post [c == i]
{
    var prob_choice: Bool
    elow = init_elow
    ehigh = init_ehigh
    n = init_n
    v = init_v
    c = init_c
    running = init_running
    i = init_i
    @unroll(2, 0)
    while running == 0 {
        v = 2 * v
        prob_choice = flip(0.5)
        if prob_choice {
            c = (2 * c) + 1
        } else {
            c = 2 * c
        }
        if !(v < n) {
            if !(n == c) && !(n < c) {
                running = 1
            } else {
                v = v - n
                c = c - n
            }
        } else {}
        if !(running == 0) {
            c = elow + c
        } else {}
    }
}
