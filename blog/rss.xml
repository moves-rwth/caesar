<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Caesar Blog</title>
        <link>https://www.caesarverifier.org/blog</link>
        <description>Caesar Blog</description>
        <lastBuildDate>Tue, 10 Jun 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Caesar at Summer School for Formal Techniques '25]]></title>
            <link>https://www.caesarverifier.org/blog/2025/06/10/caesar-at-ssft-25</link>
            <guid>https://www.caesarverifier.org/blog/2025/06/10/caesar-at-ssft-25</guid>
            <pubDate>Tue, 10 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[We had the pleasure to present Caesar at the 14th Summer School for Formal Techniques at Menlo College in Menlo Park, California, organized by the SRI Formal Methods Group.]]></description>
            <content:encoded><![CDATA[<p>We had the pleasure to present Caesar at the 14th <a href="https://ssft-sri.github.io/" target="_blank" rel="noopener noreferrer">Summer School for Formal Techniques</a> at Menlo College in Menlo Park, California, organized by the <a href="https://www.csl.sri.com/programs/formalmethods/" target="_blank" rel="noopener noreferrer">SRI Formal Methods Group</a>.
It took place from May 24th to May 30th.</p>
<p><a href="https://moves.rwth-aachen.de/people/katoen/" target="_blank" rel="noopener noreferrer">Joost-Pieter Katoen</a> gave two lectures on the theoretical foundations of probabilistic programming and their verification, and together we hosted two accompanying lab sessions where students could try out Caesar and HeyVL.</p>
<p>Here is the lecture abstract:</p>
<blockquote>
<p>Probabilistic programs encode randomized algorithms, robot controllers, learning components, security mechanisms, and much more. They are however hard to grasp. Not only by humans, also by computers: checking elementary properties related to e.g., termination are "more undecidable" than for ordinary programs. The analysis of probabilistic programs requires manipulating irrational or even transcendental numbers.</p>
<p>Although this all sounds like a no-go for (semi-)automated analysis, I will present a deductive verification technique to analyse probabilistic programs. In contrast to simulation (like MCMC), this analysis yields exact results. Our technique is based on weakest precondition reasoning. We will explain the foundations of this approach, present some proof rules to reason about probabilistic while-loops, and discuss how the analysis can be automated — either fully or with the help of invariants.</p>
</blockquote>
<p>The <a href="https://www.caesarverifier.org/blog/2025/06/10/caesar-at-ssft-25#materials">material is available online</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="materials">Materials<a href="https://www.caesarverifier.org/blog/2025/06/10/caesar-at-ssft-25#materials" class="hash-link" aria-label="Direct link to Materials" title="Direct link to Materials">​</a></h2>
<p>The slides and exercise sheets for the lectures and labs are available online:</p>
<ul>
<li><a href="https://www.caesarverifier.org/assets/ssft25/SSFT25-lectures.pdf" target="_blank" rel="noopener noreferrer">Lecture Slides: Deductive Verification of Probabilistic Programs</a></li>
<li><a href="https://www.caesarverifier.org/assets/ssft25/SSFT25-labs.pdf" target="_blank" rel="noopener noreferrer">Exercises for the two lab sessions</a>
<ul>
<li>Solutions are available on request (email us at <a href="mailto:phisch@cs.rwth-aachen.de" target="_blank" rel="noopener noreferrer">phisch@cs.rwth-aachen.de</a>).</li>
</ul>
</li>
</ul>
<p><a href="https://ssft-sri.github.io/materials/zoom.txt" target="_blank" rel="noopener noreferrer">Video recordings are also available online</a>.</p>
<p>Further recommended materials were:</p>
<ul>
<li><a href="https://doi.org/10.1017/9781108770750.007" target="_blank" rel="noopener noreferrer">Foundations of Probabilistic Programming Ch. 6: Expected Runtime Analysis by Program Verification</a></li>
<li>Annabelle McIver, Carroll Morgan, Benjamin Lucien Kaminski, Joost-Pieter Katoen: <a href="https://doi.org/10.1145/3158121" target="_blank" rel="noopener noreferrer">A new proof rule for almost-sure termination</a>. Proc. ACM Program. Lang. 2(POPL): 33:1-33:28 (2018)</li>
<li>Joost-Pieter Katoen, Friedrich Gretz, Nils Jansen, Benjamin Lucien Kaminski, Federico Olmedo: <a href="https://doi.org/10.1007/978-3-319-23506-6_4" target="_blank" rel="noopener noreferrer">Understanding Probabilistic Programs</a>. Correct System Design 2015: 15-32</li>
<li>Joost-Pieter Katoen: <a href="https://www.youtube.com/watch?v=I3sOp_mbs8k" target="_blank" rel="noopener noreferrer">Deductive Verification of Probabilistic Programs: From Theory to Automation</a>. Tutorial at ETAPS 2023.</li>
</ul>]]></content:encoded>
            <category>talks</category>
        </item>
        <item>
            <title><![CDATA[Caesar 2.2: Timeout Handling, Recursion Checks, Improved Model Checking, and More]]></title>
            <link>https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2</link>
            <guid>https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2</guid>
            <pubDate>Fri, 23 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The Caesar 2.2 is an incremental release that adds various improvements to existing features and fixes some bugs.]]></description>
            <content:encoded><![CDATA[<p>The <em>Caesar 2.2</em> is an incremental release that adds various improvements to existing features and fixes some bugs.</p>
<p><strong>Overview:</strong></p>
<ol>
<li><a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#ui-improvements">UI Improvements</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#guardrail-against-unsound-recursion">Guardrail Against Unsound Recursion</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#model-checking">Better Model Checking Support</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#ast-rule">AST Rule Improvements</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#other-changes">Other Changes</a></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ui-improvements">UI Improvements<a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#ui-improvements" class="hash-link" aria-label="Direct link to UI Improvements" title="Direct link to UI Improvements">​</a></h2>
<p>We have improved Caesar's LSP server and the Visual Studio Code extension.</p>
<ul>
<li>The extension now properly handles Caesar timeouts.</li>
<li>Gutter icons are now shown for more verification statuses (todo, ongoing, timeout).</li>
</ul>
<p>On the command-line:</p>
<ul>
<li>Caesar now supports the <code>--filter [&lt;filter&gt;]</code> command-line argument to filter the (co)procs that are to be verified or translated for model checking.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="guardrail-against-unsound-recursion">Guardrail Against Unsound Recursion<a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#guardrail-against-unsound-recursion" class="hash-link" aria-label="Direct link to Guardrail Against Unsound Recursion" title="Direct link to Guardrail Against Unsound Recursion">​</a></h2>
<p>We have added a new check to prevent unsound recursion in the <a href="https://www.caesarverifier.org/docs/proof-rules/calculi">calculus annotations</a> feature.
This check ensures that users do not accidentally invoke Park induction in an unsound way in the presence of recursive (co)procedures.
It is based on a call graph analysis of the program and over-approximates potential recursion.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="model-checking">Better Model Checking Support<a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#model-checking" class="hash-link" aria-label="Direct link to Better Model Checking Support" title="Direct link to Better Model Checking Support">​</a></h2>
<p>Caesar's support for <a href="https://www.caesarverifier.org/docs/model-checking">model checking</a> has been greatly improved in this release.
First of all, it gained a new subcommand <code>caesar mc</code> to run the model checker on a given HeyVL file.</p>
<p>Many bugs have been fixed and improvements have been made to the model checking support:</p>
<ul>
<li>Correct extraction of preconditions from <code>coproc</code>s.</li>
<li>Support non-integer rewards.</li>
<li>Support for different behaviours of uninitialized variables in the translation has been added.</li>
<li>Support for translation of more verification statements (specific forms of <code>assume</code>, <code>assert</code>) has been added.</li>
<li>Only required function definitions are now included in the translation.</li>
<li>Caesar now supports directly invoking the Storm model checker via either an installed binary or by using a Docker image.</li>
<li>Input variables can be translated as variables or as constants now.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ast-rule">AST Rule Improvements<a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#ast-rule" class="hash-link" aria-label="Direct link to AST Rule Improvements" title="Direct link to AST Rule Improvements">​</a></h2>
<p>We have updated the <a href="https://www.caesarverifier.org/docs/proof-rules/ast#new-proof-rule">"New Proof Rule for AST"</a> to be more general, allowing verification of AST for more programs.
This is a result of a combination of different formulations in the literature, our own theoretical improvements, as well as internal code improvements for the implementation.</p>
<p>We have added <a href="https://www.caesarverifier.org/docs/proof-rules/ast">new documentation</a> for general AST proofs and for this specific AST proof rule in particular.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-changes">Other Changes<a href="https://www.caesarverifier.org/blog/2025/05/23/caesar-2-2#other-changes" class="hash-link" aria-label="Direct link to Other Changes" title="Direct link to Other Changes">​</a></h2>
<ul>
<li>Documentation has been improved in many places.</li>
<li>Caesar now supports Z3's probes to determine theoretical complexities of verification tasks.</li>
</ul>
<p>Many internal improvements to the slicing algorithms have been made.</p>
<ul>
<li>Improved robustness against Z3's incremental mode instabilities.</li>
<li>Fixed the <code>sus</code> algorithm not finding optimal slices with non-extensive statements.</li>
<li>Clarified minimality guarantees of the different algorithms.</li>
</ul>
<p>Internal:</p>
<ul>
<li>Caesar's test files have been updated to consistenly use the built-in proof rules instead using the old Python-generated HeyVL encodings.</li>
<li>Caesar has been updated to compile with latest versions of backwards-incompatible C++ compilers and new versions of CMake.</li>
</ul>]]></content:encoded>
            <category>releases</category>
        </item>
        <item>
            <title><![CDATA[Foundations for Verification of Continuous Programs with Caesar]]></title>
            <link>https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous</link>
            <guid>https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous</guid>
            <pubDate>Fri, 11 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The paper "Foundations for Deductive Verification of Continuous Probabilistic Programs: From Lebesgue to Riemann and Back" by Kevin Batz, Joost-Pieter Katoen, Francesca Randone, and Tobias Winkler was recently published at OOPSLA 2025.]]></description>
            <content:encoded><![CDATA[<p>The paper <a href="https://dl.acm.org/doi/10.1145/3720429" target="_blank" rel="noopener noreferrer"><em>"Foundations for Deductive Verification of Continuous Probabilistic Programs: From Lebesgue to Riemann and Back"</em></a> by Kevin Batz, Joost-Pieter Katoen, Francesca Randone, and Tobias Winkler was recently published at <a href="https://2025.splashcon.org/track/OOPSLA" target="_blank" rel="noopener noreferrer">OOPSLA 2025</a>.</p>
<p>Before this work, Caesar was able to only verify simple <em>discrete</em> probabilistic programs, i.e. programs that only sample from discrete distributions.
This paper lays out the formal foundations for us to verify probabilistic programs that sample from continuous distributions, with support for loops, and conditioning.
One challenge is to integrate the integrals for the expected values that arise from continuous distributions into the deductive verification framework of Caesar.
The key idea is to soundly under- or over-approximate these integrals via <a href="https://en.wikipedia.org/wiki/Riemann_sum" target="_blank" rel="noopener noreferrer">Riemann sums</a>.
In addition to theoretical results such as convergence and completeness of the approach, the paper also provides case studies of continuous probabilistic programs that are encoded in HeyVL and verified with Caesar.</p>
<p><strong>In this post:</strong></p>
<ol>
<li><a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#encoding-riemann-sums-in-heyvl">Encoding Riemann Sums in HeyVL</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#tortoise-hare-race-example">Tortoise-Hare Race Example</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#beyond-the-continuous-uniform-distribution">Beyond The Continuous Uniform Distribution</a></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="encoding-riemann-sums-in-heyvl">Encoding Riemann Sums in HeyVL<a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#encoding-riemann-sums-in-heyvl" class="hash-link" aria-label="Direct link to Encoding Riemann Sums in HeyVL" title="Direct link to Encoding Riemann Sums in HeyVL">​</a></h2>
<p>The HeyVL encoding of the Riemann sum approximation is simple.
Consider sampling the variable <code>x</code> from the <em>continuous</em> uniform distribution over the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>.</p>
<p>The original sampling interval <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> is divided into <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em"></span><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">1</span></span></span></span> subintervals, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.10903em">N</span></span></span></span> has to be a chosen integer literal.
Then, the encoding looks as follows:</p>
<div class="language-heyvl codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-heyvl codeBlock_bY9V thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> x: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> j: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UInt</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> unif(</span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> N)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">cohavoc</span><span class="token plain"> x</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token keyword" style="color:rgb(12, 150, 155)">coassume</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">?</span><span class="token operator" style="color:rgb(12, 150, 155)">!</span><span class="token plain">(j </span><span class="token operator" style="color:rgb(12, 150, 155)">/</span><span class="token plain"> N </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(12, 150, 155)">&amp;&amp;</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> (j</span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token plain">) </span><span class="token operator" style="color:rgb(12, 150, 155)">/</span><span class="token plain"> N)</span><br></span></code></pre></div></div>
<p>We sample a random integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em"></span><span class="mord mathnormal" style="margin-right:0.05724em">j</span></span></span></span> from the <em>discrete</em> uniform distribution over <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[0,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mclose">)</span></span></span></span> using the <a href="https://www.caesarverifier.org/docs/stdlib/distributions">built-in <code>unif</code> distribution</a>.
The sampled integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em"></span><span class="mord mathnormal" style="margin-right:0.05724em">j</span></span></span></span> is then used to select the subinterval <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><mo stretchy="false">[</mo><mi>j</mi><mi mathvariant="normal">/</mi><mi>N</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I = [j/N, (j+1)/N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07847em">I</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em">j</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em">j</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mclose">)</span></span></span></span>.
To overapproximate the expected value on the subinterval <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07847em">I</span></span></span></span>, we <em>nondeterministically</em> select a value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">x \in I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.07847em">I</span></span></span></span> such that the expected value is maximized.
This is done using the <code>cohavoc</code> and <code>coassume</code> statements.</p>
<p>Increasing the parameter <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.10903em">N</span></span></span></span> leads to a more precise approximation of the expected value, but incurs a slowdown in the verification time.</p>
<p>The above encodes the Riemann sum over-approximation of the expected value of a function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em"></span><span class="mord mathnormal" style="margin-right:0.10764em">f</span></span></span></span> when sampling uniformly from the continuous interval <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>.
Formally:</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mspace width="1em"></mspace><mo>≤</mo><mspace width="1em"></mspace><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>N</mi></munderover><mfrac><mn>1</mn><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>⋅</mo><munder><mrow><mi>sup</mi><mo>⁡</mo></mrow><mrow><mi>j</mi><mo>∈</mo><mo stretchy="false">[</mo><mi>j</mi><mi mathvariant="normal">/</mi><mi>N</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi><mo stretchy="false">)</mo></mrow></munder><mi>f</mi><mrow><mo fence="true">(</mo><mfrac><mi>j</mi><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\int_0^1 f(x) \, dx \quad\leq\quad \sum_{j=0}^N \frac{1}{N+1} \cdot \sup_{ j \in [j/N, (j+1)/N) } f\left(\frac{j}{N+1}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.476em;vertical-align:-0.9119em"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal" style="margin-right:0.10764em">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:1em"></span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:1em"></span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:3.2421em;vertical-align:-1.4138em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em"><span style="top:-1.8723em;margin-left:0em"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em"><span class="pstrut" style="height:3.05em"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em"><span class="pstrut" style="height:3.05em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:0.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:2.6104em;vertical-align:-1.1604em"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em"><span style="top:-2.1146em;margin-left:0em"><span class="pstrut" style="height:3em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em">j</span><span class="mrel mtight">∈</span><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.05724em">j</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.10903em">N</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.10903em">N</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3em"><span class="pstrut" style="height:3em"></span><span><span class="mop">sup</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1604em"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord mathnormal" style="margin-right:0.10764em">f</span><span class="mspace" style="margin-right:0.1667em"></span><span class="minner"><span class="mopen delimcenter" style="top:0em"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord">1</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:0.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em"><span class="delimsizing size3">)</span></span></span></span></span></span></span>
<p>A dual version of the encoding can be used to obtain an <em>under</em>-approximation of the expected value.
Simply use <code>havoc</code> and <code>assume</code> statements instead of <code>cohavoc</code> and <code>coassume</code>, and use <code>?(...)</code> instead of <code>!?(...)</code>.</p>
<p>A more detailed explanation can be found in <a href="https://dl.acm.org/doi/pdf/10.1145/3720429#page=21" target="_blank" rel="noopener noreferrer">Section 9.1 of the paper</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tortoise-hare-race-example">Tortoise-Hare Race Example<a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#tortoise-hare-race-example" class="hash-link" aria-label="Direct link to Tortoise-Hare Race Example" title="Direct link to Tortoise-Hare Race Example">​</a></h2>
<p><a href="https://dl.acm.org/doi/pdf/10.1145/3720429#page=23" target="_blank" rel="noopener noreferrer">Example 9.2.3 from the paper</a> models a race between a tortoise and a hare.
As long as the hare did not overtake the tortoise, the hare flips a fair coin to decide whether to move or not.
If the hare decides to move, it samples a distance uniformly at random from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 10]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord">10</span><span class="mclose">]</span></span></span></span>.
The tortoise always moves exactly one step.
The following HeyVL code encodes a proof that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">w</mi><mi mathvariant="normal">p</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">⟦</mo><mtext mathvariant="monospace">tortoise_hare</mtext><mo mathvariant="normal" lspace="0em" rspace="0em">⟧</mo><mo stretchy="false">(</mo><mtext mathvariant="monospace">count</mtext><mo stretchy="false">)</mo><mo>≤</mo><mn>3.38</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>h</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mtext>&nbsp;</mtext><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\mathrm{wp}\llbracket\texttt{tortoise\_hare}\rrbracket(\texttt{count}) \leq 3.38 \cdot (t - h + 2)~,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord"><span class="mord mathrm">wp</span></span><span class="mopen"><span class="mopen">[</span><span class="mspace" style="margin-right:-0.1778em"></span><span class="mopen">[</span></span><span class="mord text"><span class="mord texttt">tortoise_hare</span></span><span class="mclose"><span class="mclose">]</span><span class="mspace" style="margin-right:-0.1778em"></span><span class="mclose">]</span></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">count</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">3.38</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace nobreak">&nbsp;</span><span class="mpunct">,</span></span></span></span> where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord mathnormal">h</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em"></span><span class="mord mathnormal">t</span></span></span></span> are the initial positions of the tortoise and hare, respectively.
Here, we chose the parameter <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">N = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">8</span></span></span></span> for the Riemann sum approximation.</p>
<div class="language-heyvl codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-heyvl codeBlock_bY9V thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">coproc</span><span class="token plain"> tortoise_hare(init_h: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> init_t: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain">) </span><span class="token operator" style="color:rgb(12, 150, 155)">-</span><span class="token operator" style="color:rgb(12, 150, 155)">&gt;</span><span class="token plain"> (count: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain">)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">pre</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">3.38</span><span class="token operator" style="color:rgb(12, 150, 155)">*</span><span class="token plain">((init_t </span><span class="token operator" style="color:rgb(12, 150, 155)">-</span><span class="token plain"> init_h) </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">2</span><span class="token plain">)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">post</span><span class="token plain"> count</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> h: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> init_h</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> t: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> init_t</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    count </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">@invariant</span><span class="token plain">(</span><span class="token builtin" style="color:rgb(72, 118, 214)">ite</span><span class="token plain">(h </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> t</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> count </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">3.38</span><span class="token operator" style="color:rgb(12, 150, 155)">*</span><span class="token plain">((t</span><span class="token operator" style="color:rgb(12, 150, 155)">-</span><span class="token plain">h) </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">2</span><span class="token plain">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> count))</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword" style="color:rgb(12, 150, 155)">while</span><span class="token plain"> h </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> t </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> choice: </span><span class="token builtin" style="color:rgb(72, 118, 214)">Bool</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> flip(</span><span class="token number" style="color:rgb(170, 9, 130)">0.5</span><span class="token plain">)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        </span><span class="token keyword" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> choice </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">// -------------------------------------------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">// Over-approximating the continuous sampling:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">//      inc = unif[0,1]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> inc: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UReal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> N: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UInt</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token keyword" style="color:rgb(12, 150, 155)">var</span><span class="token plain"> j: </span><span class="token builtin" style="color:rgb(72, 118, 214)">UInt</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> unif(</span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">7</span><span class="token plain">) </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">// discrete sampling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token keyword" style="color:rgb(12, 150, 155)">cohavoc</span><span class="token plain"> inc</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token keyword" style="color:rgb(12, 150, 155)">coassume</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">?</span><span class="token operator" style="color:rgb(12, 150, 155)">!</span><span class="token plain">(j </span><span class="token operator" style="color:rgb(12, 150, 155)">/</span><span class="token plain"> N </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> inc </span><span class="token operator" style="color:rgb(12, 150, 155)">&amp;&amp;</span><span class="token plain"> inc </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> (j</span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token plain">) </span><span class="token operator" style="color:rgb(12, 150, 155)">/</span><span class="token plain"> N)</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            </span><span class="token comment" style="color:rgb(152, 159, 177);font-style:italic">// -------------------------------------------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            inc </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">10</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">*</span><span class="token plain"> inc</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">            h </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> h </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> inc</span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(12, 150, 155)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        t </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> t </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        count </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> count </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><br></span></code></pre></div></div>
<p><a href="https://dl.acm.org/doi/pdf/10.1145/3720429#page=24" target="_blank" rel="noopener noreferrer">Section 9.3 of the paper</a> contains a detailed experimental evaluation with more examples.
<a href="https://doi.org/10.5281/zenodo.15175355" target="_blank" rel="noopener noreferrer">An associated artifact is available on Zenodo</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="beyond-the-continuous-uniform-distribution">Beyond The Continuous Uniform Distribution<a href="https://www.caesarverifier.org/blog/2025/04/11/foundations-continuous#beyond-the-continuous-uniform-distribution" class="hash-link" aria-label="Direct link to Beyond The Continuous Uniform Distribution" title="Direct link to Beyond The Continuous Uniform Distribution">​</a></h2>
<p>In the paper, only a statement to sample from the continuous uniform distribution is provided.
However, as their <a href="https://dl.acm.org/doi/pdf/10.1145/3720429#page=10" target="_blank" rel="noopener noreferrer"><em>Remark 1</em></a> states, this does not limit expressiveness.
By applying the <a href="https://en.wikipedia.org/wiki/Inverse_transform_sampling" target="_blank" rel="noopener noreferrer">inverse transform sampling method</a>, any continuous distribution can be sampled.
<a href="https://link.springer.com/chapter/10.1007/978-3-030-55089-9_3" target="_blank" rel="noopener noreferrer">This paper</a> by Marcin Szymczak and Joost-Pieter Katoen contains some examples of how to sample from e.g. the normal distribution.</p>]]></content:encoded>
            <category>publications</category>
        </item>
        <item>
            <title><![CDATA[Caesar 2.1: UI Improvements, More Guardrails, and Improvements to Slicing]]></title>
            <link>https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1</link>
            <guid>https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1</guid>
            <pubDate>Fri, 17 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The Caesar 2.1 release adds contains various improvements to existing features and fixes some bugs.]]></description>
            <content:encoded><![CDATA[<p>The <em>Caesar 2.1</em> release adds contains various improvements to existing features and fixes some bugs.</p>
<p><strong>Overview:</strong></p>
<ol>
<li><a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#ui-and-docs">UI and Documentation Improvements</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#more-guardrails">More Guardrails</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#improvements-to-slicing">Slicing Improvements</a></li>
<li><a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#minor-fixes">Minor Fixes</a></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ui-and-docs">UI and Documentation Improvements<a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#ui-and-docs" class="hash-link" aria-label="Direct link to UI and Documentation Improvements" title="Direct link to UI and Documentation Improvements">​</a></h2>
<p>We have improved Caesar's UI, especially the Visual Studio Code extension.
Thanks to PRs <a href="https://github.com/moves-rwth/caesar/pull/48" target="_blank" rel="noopener noreferrer">#48</a> and <a href="https://github.com/moves-rwth/caesar/pull/60" target="_blank" rel="noopener noreferrer">#60</a>:</p>
<ul>
<li>We now properly support verification with multiple open HeyVL files (before, the extension only remembered the latest verification task). This includes error messages and warnings.</li>
<li>We improved the wording in the status bar to more accurately reflect the verification status.</li>
<li>Proper handling of "unknown" results from the SMT solver.</li>
<li>The tooltip menu on the status bar is much more dynamic and supports more features depending on verification results.</li>
</ul>
<p><a href="https://github.com/moves-rwth/caesar/pull/59" target="_blank" rel="noopener noreferrer">PR #59</a> added verification condition explanations for the <code>@unroll</code> proof rule.</p>
<p>Additionally:</p>
<ul>
<li>We now automatically start the Caesar LSP server if a HeyVL file is opened.</li>
<li>The default timeout for Caesar in VS Code is now 60 seconds (previously it was 300 seconds).</li>
<li>The documentation for various features of Caesar has been improved with notes about some relevant theoretical aspects.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-guardrails">More Guardrails<a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#more-guardrails" class="hash-link" aria-label="Direct link to More Guardrails" title="Direct link to More Guardrails">​</a></h2>
<p>Caesar now prevents accidental unsound verification through more "guardrails".
This extends the soundness checks from <a href="https://www.caesarverifier.org/docs/proof-rules/calculi">calculus annotations</a> feature introduced in the last release.
Thanks to <a href="https://github.com/moves-rwth/caesar/pull/42" target="_blank" rel="noopener noreferrer">PR #42</a>:</p>
<ul>
<li>We now check that procedures only call other procedures with the same calculus annotations.<!-- -->
<ul>
<li>If either the caller or callee has no calculus annotation, we do not currently warn the user.</li>
</ul>
</li>
<li>We now check that <code>proc</code>s are only called inside <code>proc</code>s (and analogously for <code>coproc</code>s).</li>
<li>Various other checks for proof rule annotations have been improved.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improvements-to-slicing">Improvements to Slicing<a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#improvements-to-slicing" class="hash-link" aria-label="Direct link to Improvements to Slicing" title="Direct link to Improvements to Slicing">​</a></h2>
<p>We have been hard at work to complete and further improve <a href="https://www.caesarverifier.org/docs/caesar/slicing">Caesar's slicing support</a>.</p>
<ul>
<li>We now support slicing probabilistic choices via the command-line flag <code>--slice-sampling</code>.<!-- -->
<ul>
<li>This is disabled by default because we have observed negative performance effects for relatively little gain in the average case.</li>
</ul>
</li>
<li>Caesar now uses irrelevancy information from the SMT solver to speed up the slice search.</li>
<li>Caesar no longer highlights the entire procedure if it does not have a <code>pre</code> when slicing for verification.</li>
<li>We now properly slice demonic and angelic choices.</li>
</ul>
<p>We added additional slicing backends to slice verifying programs:</p>
<ul>
<li>A slicing backend on unsatisfiable cores was added (<code>core</code>). It is very fast, but does not report optimal slices in many cases.<!-- -->
<ul>
<li>This backend is now the default when slicing verifying programs.</li>
</ul>
</li>
<li>We implemented minimal unsat core enumeration to support finding the locally or globally smallest slices (<code>mus</code> and <code>sus</code> backends).</li>
<li>The old <code>exists-forall</code> backend still exists, but is not recommended for the general use case because it does not support reasoning with uninterpreted functions.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="command-line-interface">Command-Line Interface<a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#command-line-interface" class="hash-link" aria-label="Direct link to Command-Line Interface" title="Direct link to Command-Line Interface">​</a></h2>
<p>Caesar's command-line interface has been redesigned.
The binary now accepts different sub-commands to enable different tasks.</p>
<ul>
<li>The new <code>verify</code> command includes all behavior of the previous Caesar CLI interface.<!-- -->
<ul>
<li>If no sub-command is specified, this command will be used. Therefore, the command-line interface is backwards-compatible.</li>
</ul>
</li>
<li>The <code>to-jani</code> command can be used to only convert HeyVL files to JANI files without running Caesar's checks or verification.</li>
<li>The <code>shell-completions</code> command can be used to generate code for shell completions for the <code>caesar</code> binary.</li>
</ul>
<p>Furthermore:</p>
<ul>
<li>Caesar's <code>--help</code> output is now much more organized and helpful.</li>
<li>A new <code>--no-verify</code> option can be used to skip the final SMT check. This is useful in conjunction with either <code>--print-smt</code> or <code>--smt-dir</code> options.</li>
<li>The <code>--print-smt</code> and <code>--smt-dir</code> flags will now emit the SMT-LIB code <em>before</em> the final SMT call happens to avoid no output on timeouts.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="minor-fixes">Minor Fixes<a href="https://www.caesarverifier.org/blog/2025/01/17/caesar-2-1#minor-fixes" class="hash-link" aria-label="Direct link to Minor Fixes" title="Direct link to Minor Fixes">​</a></h2>
<p>We have also fixed minor issues, for example:</p>
<ul>
<li>Proper error reporting when using the <code>@k_induction</code> proof rule with the invalid parameter <code>k = 0</code>.</li>
<li>The <code>--smt-dir</code> flag now works properly on Windows.</li>
<li>Fixed syntax highlighting of block comments in VS Code.</li>
</ul>]]></content:encoded>
            <category>releases</category>
        </item>
        <item>
            <title><![CDATA[A Game-Based Operational Semantics for HeyVL]]></title>
            <link>https://www.caesarverifier.org/blog/2024/12/31/game-based-semantics</link>
            <guid>https://www.caesarverifier.org/blog/2024/12/31/game-based-semantics</guid>
            <pubDate>Tue, 31 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[The paper [_"A Game-Based Semantics for the Probabilistic]]></description>
            <content:encoded><![CDATA[<p>The paper <a href="https://doi.org/10.1007/978-3-031-75434-0_17" target="_blank" rel="noopener noreferrer"><em>"A Game-Based Semantics for the Probabilistic
Intermediate Verification Language HeyVL"</em></a> by Christoph Matheja was published at <a href="https://2024-isola.isola-conference.org/" target="_blank" rel="noopener noreferrer">AISoLA 2024</a> and is now available online.</p>
<p>Quoting from its abstract:</p>
<blockquote>
<p>[T]he original language [HeyVL] lacked a formal “ground truth” in terms of a small-step operational semantics that enables an intuitive reading of HeyVL programs.</p>
<p>In this paper, we define an operational semantics for a cleaned-up version of HeyVL in terms of <em>refereed</em> stochastic games, a novel extension of simple stochastic games in which a referee may perform quantitative reasoning about the expected outcome of sub-games and give one player an advantage if those sub-game are outside of certain boundaries.</p>
</blockquote>
<p>This new operational semantics is aimed at improved intuition and ergonomics of HeyVL, as well as a possible future work enabling other verification backends such as ones based on probabilistic model checking tools.</p>
<p>Note that the existing <a href="https://www.caesarverifier.org/docs/model-checking">model checking backend</a> of Caesar does not yet support for the full extent of the HeyVL language, but merely an "executable subset".
Therefore, this publication shows an avenue for a future extension of this existing backend via refereed stochastic games.</p>]]></content:encoded>
            <category>publications</category>
        </item>
        <item>
            <title><![CDATA[Caesar 2.0: VSCode Extension, Slicing, and more!]]></title>
            <link>https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0</link>
            <guid>https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0</guid>
            <pubDate>Mon, 20 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We are happy to announce Caesar 2.0: the next release of Caesar packed with a lot of new features.]]></description>
            <content:encoded><![CDATA[<p>We are happy to announce <em>Caesar 2.0</em>: the next release of Caesar packed with a lot of new features.</p>
<p><strong>Overview:</strong></p>
<ol>
<li><a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-vscode-extension"><em>Caesar Verifier</em> Visual Studio Code Extension</a></li>
<li><a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-slicing">Slicing for Error Reporting and Correctness</a></li>
<li><a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-calculi">Calculus Annotations for Proof Rules</a></li>
<li><a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-jani">Model Checking Support via JANI</a></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="caesar20-vscode-extension"><em>Caesar Verifier</em> Visual Studio Code Extension<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-vscode-extension" class="hash-link" aria-label="Direct link to caesar20-vscode-extension" title="Direct link to caesar20-vscode-extension">​</a></h2>
<!-- -->
<a href="https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar" target="_blank" rel="noopener noreferrer"><img src="https://www.caesarverifier.org/img/vc-demo.png" style="float:right;max-width:350px;margin-left:1em" class="item shadow--tl"></a>
<p>Our new <em>Caesar Verifier</em> VSCode extension is now the recommended way to use Caesar.
The extension is available in the VSCode and VSCodium extension marketplaces and can be installed by searching for <em>Caesar Verifier</em>.</p>
<p>The extension is built on the <a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener noreferrer">Language Server Protocol</a> and uses the Caesar binary under the hood.</p>
<a href="https://marketplace.visualstudio.com/items?itemName=rwth-moves.caesar" target="_blank" rel="noopener noreferrer" class="button button--primary">Go to Caesar Verifier on VSCode Marketplace</a>
<br>
<br>
<p><strong>Features:</strong></p>
<ul>
<li>Syntax highlighting and language configuration for HeyVL.</li>
<li>Snippets for HeyVL.</li>
<li>Verify HeyVL files on file save or on command.</li>
<li>Verification errors and successes are shown in the gutter via icons.</li>
<li>Diagnostics such as errors or warnings are shown in the code and in the "Problems" menu in VSCode — <a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-slicing">powered by slicing!</a></li>
<li>Inline explanations of computed verification conditions (shown in picture!).</li>
<li>Automatic installation and updating of Caesar.</li>
</ul>
<div style="clear:both"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="caesar20-slicing">Slicing for Error Reporting and Correctness<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-slicing" class="hash-link" aria-label="Direct link to Slicing for Error Reporting and Correctness" title="Direct link to Slicing for Error Reporting and Correctness">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="assertion-slicing">Assertion Slicing<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#assertion-slicing" class="hash-link" aria-label="Direct link to Assertion Slicing" title="Direct link to Assertion Slicing">​</a></h3>
<a href="https://www.caesarverifier.org/assets/images/slicing-demo-433a52249f8293132265395163c2dca4.png"><img src="https://www.caesarverifier.org/assets/images/slicing-demo-433a52249f8293132265395163c2dca4.png" style="float:right;max-width:350px;margin-left:1em" class="item shadow--tl"></a>
<p>The error reports in Caesar are driven by the first implementation of specification-based slicing for probabilistic programs.
By default, our slicing implementation is used to identify which <code>assert</code>-like statements are responsible for errors (<a href="https://www.caesarverifier.org/docs/caesar/slicing#assertion-slicing">Caesar's <em>assertion slicing</em></a>).</p>
<p>An example is shown on the right.
The slicing algorithm has determined that the invariant might not be inductive and could rule out e.g. that the pre does not entail the invariant.</p>
<p>Caesar's slicing does not operate on high-level programs with loops, but instead on the low-level HeyVL statements, including verification statements.
This enables error reporting (and other slicing applications) for any verification problems that you can encode in HeyVL.
Custom error messages can be added via <a href="https://www.caesarverifier.org/docs/caesar/slicing#slicing-message-annotations">slice message annotations</a>.</p>
<div style="clear:both"></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="assumption-slicing">Assumption Slicing<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#assumption-slicing" class="hash-link" aria-label="Direct link to Assumption Slicing" title="Direct link to Assumption Slicing">​</a></h3>
<a href="https://www.caesarverifier.org/assets/images/assumption-slicing-demo-09d6f547e9ec06be1859b886264ac45f.png"><img src="https://www.caesarverifier.org/assets/images/assumption-slicing-demo-09d6f547e9ec06be1859b886264ac45f.png" style="float:right;max-width:330px;margin-left:1em" class="item shadow--tl"></a>
<p>Whereas assertion slicing is concerned with finding a minimal set of assertions in the program so that the program still has an error, <a href="https://www.caesarverifier.org/docs/caesar/slicing#assumption-slicing"><em>assumption slicing</em></a> tries to find a minimal set of assumptions so that the program still verifies.</p>
<p>In the example on the right, we can see a slightly modified version of the geometric loop example from above.
Now it has a constant starting value of zero.
With the correct invariant, the program verifies.
But Caesar can also tell us that this <code>while</code> loop could also be an <code>if</code> statement — no loop is required to satisfy the specification.
The interpretation of this result is up to the user.
Maybe the program can be simplified, but maybe the specification is not as strong as one thought and needs to be strengthened!</p>
<div style="clear:both"></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="general-slicing">General Slicing<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#general-slicing" class="hash-link" aria-label="Direct link to General Slicing" title="Direct link to General Slicing">​</a></h3>
<a href="https://www.caesarverifier.org/assets/images/general-slicing-demo-448dc2ed5f2790c1067e1f5e67703716.png"><img src="https://www.caesarverifier.org/assets/images/general-slicing-demo-448dc2ed5f2790c1067e1f5e67703716.png" style="float:right;max-width:400px;margin-left:1em" class="item shadow--tl"></a>
<p>Caesar's implementation of slicing is not restricted to verification statements such as assertions and assumptions.
With program annotations, Caesar can be instructed to run slicing for correctness and try to eliminate unnecessary assignments from the program.</p>
<p>In the example on the right, we have a probabilistic program that encodes a Bayesian network.<sup><a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#user-content-fn-1-bf9971" id="user-content-fnref-1-bf9971" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>
We have added the <a href="https://www.caesarverifier.org/docs/caesar/slicing#general-slicing-for-correctness"><code>@slice_verify</code> annotation</a> to have Caesar also try to slice assignments.
Caesar determined that most assignments are not necessary to satisfy the specification.</p>
<p>There is also a corresponding <a href="https://www.caesarverifier.org/docs/caesar/slicing#general-slicing-for-errors"><code>@slice_error</code> annotation</a> to do slicing for errors on statements that are not <code>assert</code>-like.</p>
<div style="clear:both"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="caesar20-calculi">Calculus Annotations for Proof Rules<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-calculi" class="hash-link" aria-label="Direct link to Calculus Annotations for Proof Rules" title="Direct link to Calculus Annotations for Proof Rules">​</a></h2>
<a href="https://www.caesarverifier.org/assets/images/calculi-demo-335befcfe628e522d042da2eb3488dda.png"><img src="https://www.caesarverifier.org/assets/images/calculi-demo-335befcfe628e522d042da2eb3488dda.png" style="float:right;max-width:400px;margin-left:1em" class="item shadow--tl"></a>
<p>Caesar's HeyVL was designed as a <a href="https://www.caesarverifier.org/docs/publications#oopsla-23">quantitative intermediate verification language</a>, therefore it allows encoding all sorts of potentially unsound proof rules.
To make it easier to use Caesar to verify high-level programs with loops with respect to well-known expectation-based calculi and proof rules, we have added <a href="https://www.caesarverifier.org/docs/proof-rules/calculi">calculus annotations</a> to Caesar.
They are <code>@wp</code>, <code>@wlp</code> and <code>@ert</code>.
When they are added to a <code>proc</code>/<code>coproc</code>, Caesar will do some additional checks to ensure that proof rules are actually sound.</p>
<div style="clear:both"></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="caesar20-jani">Model Checking Support via JANI<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#caesar20-jani" class="hash-link" aria-label="Direct link to Model Checking Support via JANI" title="Direct link to Model Checking Support via JANI">​</a></h2>
<p>While deductive verification can deal with infinite state spaces, infinite data types, and is generally pretty awesome, sometimes you want to analyze a proabilistic program whose state space can be finitely represented.
With <a href="https://www.caesarverifier.org/docs/model-checking">Caesar's model checking support via JANI</a>, you can export your probabilistic program to the <a href="https://jani-spec.org/" target="_blank" rel="noopener noreferrer">JANI format</a> to use probabilistic model checkers.</p>
<p>Caesar's support is limited to <a href="https://www.caesarverifier.org/docs/model-checking#supported-programs">executable probabilistic programs</a>.
That means that quantitative verification statements like <code>assert</code>, <code>assume</code>, and <code>havoc</code> are restricted or not supported.</p>
<p>Caesar's JANI export was designed as a replacement for <a href="https://github.com/moves-rwth/storm/pull/456" target="_blank" rel="noopener noreferrer">the recently deleted storm-pgcl</a>, and can now be used as a pGCL frontend for model checkers that accept JANI inputs.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-bf9971">
<p>The program is Figure 7 of <a href="https://doi.org/10.1016/j.scico.2022.102822" target="_blank" rel="noopener noreferrer">Marcelo Navarro, Federico Olmedo: Slicing of Probabilistic Programs Based on Specifications. ECOOP 2022</a>. <a href="https://www.caesarverifier.org/blog/2024/05/20/caesar-2-0#user-content-fnref-1-bf9971" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category>releases</category>
        </item>
        <item>
            <title><![CDATA[ERC Proof of Concept Grant]]></title>
            <link>https://www.caesarverifier.org/blog/2024/01/18/erc-poc-grant</link>
            <guid>https://www.caesarverifier.org/blog/2024/01/18/erc-poc-grant</guid>
            <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We are happy to announce that RWTH's MOVES group, headed by Prof. Joost-Pieter Katoen, will receive funding from the European Research Council (ERC) for a Proof of Concept Grant to improve Caesar.]]></description>
            <content:encoded><![CDATA[<p>We are happy to announce that RWTH's <a href="https://moves.rwth-aachen.de/" target="_blank" rel="noopener noreferrer">MOVES group</a>, headed by Prof. Joost-Pieter Katoen, will receive funding from the European Research Council (ERC) for a <a href="https://erc.europa.eu/apply-grant/proof-concept" target="_blank" rel="noopener noreferrer">Proof of Concept Grant</a> to improve Caesar.</p>
<p>Caesar was originally built in part through <a href="https://moves.rwth-aachen.de/research/projects/frappant/" target="_blank" rel="noopener noreferrer">FRAPPANT</a>, the 2018 ERC Advanced Grant "Formal Reasoning about Probabilistic Programs: Breaking New Ground for Automation".
The new ERC Proof of Concept research proposal "A Deductive Verifier for Probabilistic Programs (VERIPROB)" is about applying knowledge from FRAPPANT to build Caesar into a prototype that can be made use of by industry — "to turn science into practice".</p>
<p>See also the <a href="https://www.rwth-aachen.de/cms/root/die-rwth/aktuell/pressemitteilungen/januar/~bfqqei/die-arbeit-mit-der-wahrscheinlichkeit/?lidx=1" target="_blank" rel="noopener noreferrer">press release by the university</a> and <a href="https://erc.europa.eu/news-events/news/Proof-of-Concept-Grants-2023" target="_blank" rel="noopener noreferrer">the ERC announcement</a>.</p>]]></content:encoded>
            <category>grants</category>
        </item>
        <item>
            <title><![CDATA[Talk at the Dafny 2024 Workshop]]></title>
            <link>https://www.caesarverifier.org/blog/2024/01/14/dafny-2024-talk</link>
            <guid>https://www.caesarverifier.org/blog/2024/01/14/dafny-2024-talk</guid>
            <pubDate>Sun, 14 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[On January 14, 2024, I presented Caesar and the basics of our quantitative intermediate language HeyVL at the Dafny 2024 workshop.]]></description>
            <content:encoded><![CDATA[<p>On January 14, 2024, I presented Caesar and the basics of our quantitative intermediate language HeyVL at the <a href="https://popl24.sigplan.org/home/dafny-2024" target="_blank" rel="noopener noreferrer">Dafny 2024 workshop</a>.
The workshop was part of the POPL 2024 conference.</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/ZLcDieBq05o?si=Cy36J26qvXpckR3q&amp;start=26188" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
<p>The talk starts at timestamp 7:16:23 and ends at timestamp 7:34:00.</p>]]></content:encoded>
            <category>talks</category>
        </item>
        <item>
            <title><![CDATA[Distinguished Artifact at OOPSLA '23]]></title>
            <link>https://www.caesarverifier.org/blog/2023/10/27/oopsla23-distinguished-artifact</link>
            <guid>https://www.caesarverifier.org/blog/2023/10/27/oopsla23-distinguished-artifact</guid>
            <pubDate>Fri, 27 Oct 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[The artifact associated with our OOPSLA '23 publication A Deductive Verification Infrastructure for Probabilistic Programs has received the Distinguished Artifact award, praising exceptionally high quality.]]></description>
            <content:encoded><![CDATA[<p>The artifact associated with our <a href="https://2023.splashcon.org/track/splash-2023-oopsla" target="_blank" rel="noopener noreferrer">OOPSLA '23</a> publication <a href="https://doi.org/10.1145/3622870" target="_blank" rel="noopener noreferrer">A Deductive Verification Infrastructure for Probabilistic Programs</a> has <a href="https://2023.splashcon.org/track/splash-2023-Artifacts#distinguished-artifacts" target="_blank" rel="noopener noreferrer">received the <em>Distinguished Artifact</em> award</a>, praising exceptionally high quality.</p>
<p>The artifact consists the tool Caesar together with benchmark examples.</p>
<p>The artifact has a <a href="https://dl.acm.org/do/10.5281/zenodo.8146987/full/" target="_blank" rel="noopener noreferrer">page in the ACM Digital Library</a> and can be <a href="https://zenodo.org/records/8146987" target="_blank" rel="noopener noreferrer">downloaded from Zenodo</a>.</p>]]></content:encoded>
            <category>publications</category>
        </item>
        <item>
            <title><![CDATA[Paper Accepted at OOPSLA '23]]></title>
            <link>https://www.caesarverifier.org/blog/2023/09/28/oopsla23</link>
            <guid>https://www.caesarverifier.org/blog/2023/09/28/oopsla23</guid>
            <pubDate>Thu, 28 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[HeyVL and Caesar were accepted at OOPSLA '23: A Deductive Verification Infrastructure for Probabilistic Programs by Schröer et al.]]></description>
            <content:encoded><![CDATA[<p>HeyVL and Caesar were accepted at <a href="https://2023.splashcon.org/track/splash-2023-oopsla" target="_blank" rel="noopener noreferrer">OOPSLA '23</a>: <a href="https://doi.org/10.1145/3622870" target="_blank" rel="noopener noreferrer">A Deductive Verification Infrastructure for Probabilistic Programs</a> by Schröer et al.
The artifact received the <em>reusable</em> badge, which is the highest possible badge.</p>
<p>The preprint is available on arxiv: <a href="https://arxiv.org/abs/2309.07781" target="_blank" rel="noopener noreferrer">https://arxiv.org/abs/2309.07781</a>.</p>
<p>You can find more information on our <a href="https://www.caesarverifier.org/docs/publications">publications page</a>.</p>]]></content:encoded>
            <category>publications</category>
        </item>
        <item>
            <title><![CDATA[Winner of the 2022 WhatsApp Privacy Aware Program Analysis Request for Proposals]]></title>
            <link>https://www.caesarverifier.org/blog/2022/10/10/whatsapp-privacy-aware-program-analysis</link>
            <guid>https://www.caesarverifier.org/blog/2022/10/10/whatsapp-privacy-aware-program-analysis</guid>
            <pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Philipp Schroer and Joost-Pieter Katoen receive a Research Award from WhatsApp, through its parent company, Meta Platforms, Inc. for their research proposal “A Deductive Verification Infrastructure for Probabilistic Programs”. Out of 62 research proposals that were submitted to WhatsApp Privacy Aware Program Analysis, 6 projects have been awarded. For more information, see here.]]></description>
            <content:encoded><![CDATA[<p>Philipp Schroer and Joost-Pieter Katoen receive a Research Award from WhatsApp, through its parent company, Meta Platforms, Inc. for their research proposal “A Deductive Verification Infrastructure for Probabilistic Programs”. Out of 62 research proposals that were submitted to WhatsApp Privacy Aware Program Analysis, 6 projects have been awarded. For more information, <a href="https://research.facebook.com/blog/2022/10/-announcing-the-winners-of-the-2022-whatsapp-privacy-aware-program-analysis-request-for-proposals/" target="_blank" rel="noopener noreferrer">see here</a>.</p>]]></content:encoded>
            <category>grants</category>
        </item>
    </channel>
</rss>