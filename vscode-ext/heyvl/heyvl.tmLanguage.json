{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "HeyVL",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#type"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#annotations"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.heyvl",
          "match": "\\b(var|(co)?assume|(co)?assert|(co)?negate|(co)?validate|if( (\\\\cap|\\\\cup))?|else|(co)?proc|pre|post|(co)?compare|tick|reward|while|(co)?havoc|domain|func|axiom)\\b"
        },
        {
          "name": "keyword.control.heyvl",
          "match": "->"
        },
        {
          "name": "keyword.operator.heyvl",
          "match": "\\b(forall|exists|inf|sup|ite|let)\\b"
        },
        {
          "name": "keyword.operator.heyvl",
          "match": "!|\\+|\\*|-|/(?![/\\*])|==>|==|<=|<|>=|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.heyvl",
          "match": "(\\\\cup|\\\\cap)\\b"
        },
        {
          "name": "support.function.builtin",
          "match": "\\bflip\\b"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "name": "entity.name.type",
          "match": "(\\[\\])+[a-zA-Z]+\\b"
        },
        {
          "name": "entity.name.type",
          "match": "\\b(Bool|Int|UInt|Real|UReal|EUReal)\\b"
        }
      ]
    },
    "paren-expr": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close"
        }
      },
      "name": "expression.group",
      "patterns": [
        {
          "include": "#expr"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "/{2}.*",
          "name": "comment.single.heyvl"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.heyvl"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.numeric.heyvl",
          "match": "\\b[0-9]+/[0-9]+"
        },
        {
          "name": "constant.numeric.heyvl",
          "match": "\\b[0-9]+(\\.[0-9]+)?"
        },
        {
          "name": "constant.numeric.heyvl",
          "match": "âˆž|\\\\infty\\b"
        },
        {
          "name": "constant.language.heyvl",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "string.heyvl",
          "begin": "\"",
          "end": "\""
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "entity.name.tag",
          "match": "@\\w+\\b"
        }
      ]
    }
  },
  "scopeName": "source.heyvl"
}