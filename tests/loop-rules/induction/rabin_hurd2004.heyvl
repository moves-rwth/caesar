// RUN: @caesar @file --function-encoding fuel-param

// Verification of Rabin's mutual exclusion algorithm, based on
//      Joe Hurd, Annabelle McIver, Carroll Morgan: Probabilistic Guarded Commands Mechanized in HOL. QAPL 2004: 95-111
//      https://doi.org/10.1016/j.entcs.2004.01.021

domain Exponentials {
    func rec_pown_2(exponent: UInt): UReal = ite(exponent == 0, 1, rec_pown_2(exponent - 1) / 2)
}

proc rabin(init_i: UInt, init_n: UInt, init_d: UInt) -> (i: UInt, n: UInt, d: UInt)
    pre ([1 == init_i] + ([1 < init_i] * (2/3)))
    post [i == 1]
{
    i = init_i
    n = init_n
    d = init_d
    @invariant(([1 == i] + ([1 < i] * (2/3))))
    while 1 < i {
        n = i
        @invariant(([(0 <= n) && (n <= i)]) * (((2/3) * (1 - ((([i == n] * (n + 1)) * rec_pown_2(n)) + ([i == (n + 1)] * rec_pown_2(n))))) + ((([i == n] * n) * rec_pown_2(n)) + ([i == (n + 1)] * rec_pown_2(n)))))
        while 0 < n {
            var prob_choice: Bool = ber(1, 1)
            if prob_choice {
                d = 0
            } else {
                d = 1
            }
            i = i - d
            n = n - 1
        }
    }
}
