// RUN: @caesar @file
// Auto-generated by pgcl2heyvl from test_ost.pgcl
//
// We prove Example 39 from the Aiming Low Is Harder paper.
//
// HeyVL file to show that
//     b + [a] <= wp[C](b)
// using the Optional Stopping Theorem from Aiming Low is Harder paper with
// invariant = b + [a], c = 1 and
// past-invariant = 2 * [a] is used to show that C is PAST by showing
//      2 * [a] >= ert[C](0)
// for the pGCL program C:
//
//     bool a;
//     nat b;
//     nat k;
//     while (a) {
//         {
//             a := false;
//         } [0.5] {
//             b := b + 1;
//         }
//         k := k + 1;
//     }

// past_I < ∞
proc lt_infinity(a: Bool, b: UInt, k: UInt) -> ()
{
    assert ?(2 * [a] < ?(true))
}

// \Phi_{0}(past_I) <= past_I, so ert[P](0) <= past_I
coproc past(init_a: Bool, init_b: UInt, init_k: UInt) -> (a: Bool, b: UInt, k: UInt)
    pre 2 * [init_a]
    post 0
{
    var prob_choice: Bool
    a = init_a
    b = init_b
    k = init_k
    if a {
        prob_choice = flip(0.5)
        if prob_choice {
            a = false
        } else {
            b = b + 1
        }
        k = k + 1
        tick 1
        assert 2 * [a]
        assume 0
    } else {}
}

// wp[P](|I(s)-I|)(s) <= c
coproc conditional_difference_bounded(init_a: Bool, init_b: UInt, init_k: UInt) -> (a: Bool, b: UInt, k: UInt)
    pre 1
    post ite((init_b + [init_a]) <= (b + [a]),(b + [a]) - (init_b + [init_a]),(init_b + [init_a]) - (b + [a]))
{
    var prob_choice: Bool
    a = init_a
    b = init_b
    k = init_k
    prob_choice = flip(0.5)
    if prob_choice {
        a = false
    } else {
        b = b + 1
    }
    k = k + 1
}

// I <= \Phi_{post}(I)
proc lower_bound(init_a: Bool, init_b: UInt, init_k: UInt) -> (a: Bool, b: UInt, k: UInt)
    pre init_b + [init_a]
    post b
{
    var prob_choice: Bool
    a = init_a
    b = init_b
    k = init_k
    if a {
        prob_choice = flip(0.5)
        if prob_choice {
            a = false
        } else {
            b = b + 1
        }
        k = k + 1
        assert b + [a]
        assume 0
    } else {}
}

// !guard ==> (I = f)
proc harmonize_I_f(a: Bool, b: UInt, k: UInt) -> ()
{
    assert ?(!a ==> (b + [a] == b))
}

// \Phi_f(I) < ∞
coproc loopiter_lt_infty(init_a: Bool, init_b: UInt, init_k: UInt) -> (a: Bool, b: UInt, k: UInt)
    pre 0
    post b
{
    validate
    assume \infty
    var prob_choice: Bool
    a = init_a
    b = init_b
    k = init_k
    if a {
        prob_choice = flip(0.5)
        if prob_choice {
            a = false
        } else {
            b = b + 1
        }
        k = k + 1
        assert b + [a]
        assume 0
    } else {}
}
