// RUN: @caesar @file
// Auto-generated by pgcl2heyvl from test_past.pgcl
//
// HeyVL file to show that C is positively almost-surely terminating
// using PAST rule by Chakarov et al. (2013) with
// invariant = x + 1 eps = 0.5 and k = 1
// for the pGCL program C:
//
//     nat x;
//     while (0 < x) {
//         {
//             x := x - 1;
//         } [0.5] { }
//     }

// [!G] * I <= K
proc condition_1(x: UInt) -> ()
{
    assert ?(([!(0 < x)] * (x + 1)) <= 1)
}

// [G] * K <= [G] * I + [!G]
proc condition_2(x: UInt) -> ()
{
    assert ?(([0 < x] * 1) <= (([0 < x] * (x + 1)) + [!(0 < x)]))
}

// \Phi_0(I) <= [G] * (I - eps)
coproc condition_3(init_x: UInt) -> (x: UInt)
    pre [0 < init_x] * ((init_x + 1) - 0.5)
    post 0
{
    var prob_choice: Bool
    x = init_x
    if 0 < x {
        prob_choice = flip(0.5)
        if prob_choice {
            x = x - 1
        } else {}
        assert x + 1
        assume 0
    } else {}
}
