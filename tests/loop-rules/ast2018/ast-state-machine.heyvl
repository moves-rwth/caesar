// RUN: @caesar @file
// Auto-generated by pgcl2heyvl from ast-rule2.pgcl
//
// HeyVL file to show that C is almost-surely terminating
// using AST rule by McIver et al. (2018) with
// invariant = true, variant = [0 < x] + [(1 <= x) && (x <= 2)], probability function = 0.5, decrease function = 1
// for the pGCL program C:
//
//     nat x;
//     while (0 < x) {
//         if (x = 1) {
//             {
//                 x := 0;
//             } [1/2] {
//                 x := x + 1;
//             }
//         } else {
//             if (3 <= x) {
//                 x := 0;
//             } else {
//                 x := x + 1;
//             }
//         }
//     }

// [I] <= \Phi_{[I]}([I])
proc I_wp_subinvariant(init_x: UInt) -> (x: UInt)
    pre [true]
    post [true]
{
    var prob_choice: Bool
    x = init_x
    if 0 < x {
        if x == 1 {
            prob_choice = flip((1/2))
            if prob_choice {
                x = 0
            } else {
                x = x + 1
            }
        } else {
            if 3 <= x {
                x = 0
            } else {
                x = x + 1
            }
        }
        assert [true]
        assume 0
    } else {}
}

// !G iff V = 0
proc termination_condition(x: UInt) -> ()
{
    assert ?(!(0 < x) == ([0 < x] + [(1 <= x) && (x <= 2)] == 0))
}

// \Phi_{V}(V) <= V
coproc V_wp_superinvariant(init_x: UInt) -> (x: UInt)
    pre [0 < init_x] + [(1 <= init_x) && (init_x <= 2)]
    post [0 < x] + [(1 <= x) && (x <= 2)]
{
    var prob_choice: Bool
    x = init_x
    if 0 < x {
        if x == 1 {
            prob_choice = flip((1/2))
            if prob_choice {
                x = 0
            } else {
                x = x + 1
            }
        } else {
            if 3 <= x {
                x = 0
            } else {
                x = x + 1
            }
        }
        assert [0 < x] + [(1 <= x) && (x <= 2)]
        assume 0
    } else {}
}

// [I] * [G] * (p o V) <= \s. wp[P]([V < V(s) - d(V(s))])(s)
proc progress_condition(init_x: UInt) -> (x: UInt)
    pre [true] * ([0 < init_x] * 0.5)
    post [([0 < x] + [(1 <= x) && (x <= 2)]) <= (([0 < init_x] + [(1 <= init_x) && (init_x <= 2)]) - 1)]
{
    var prob_choice: Bool
    x = init_x
    if x == 1 {
        prob_choice = flip((1/2))
        if prob_choice {
            x = 0
        } else {
            x = x + 1
        }
    } else {
        if 3 <= x {
            x = 0
        } else {
            x = x + 1
        }
    }
}
