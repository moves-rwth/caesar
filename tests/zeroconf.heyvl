// RUN: @caesar @file --function-encoding fuel-param

domain Arith {
    func exp(b: UReal, i: UInt): UReal = ite(i == 0, 1, b * exp(b, i - 1))
    axiom exp_bounded forall b: UReal, i: UInt @trigger(exp(b, i)). (b <= 1) ==> (exp(b, i) <= 1)
}

domain Constants {
    func probCollision(): UReal // this is often called q
    axiom collisionProb probCollision() <= 1
    func probMessageLost(): UReal // this is often called p
    axiom messageLostProb probMessageLost() <= 1
    func maxTries(): UInt // this is often called N
}

coproc arp(triesRemaining: UInt) -> (success: Bool)
    pre 1 - exp(probMessageLost(), triesRemaining)
    post [success]
{
    if triesRemaining == 0 {
        success = false
    } else {
        var messageLost: Bool = flip(probMessageLost())
        if messageLost {
            success = arp(triesRemaining - 1)
        } else {
            success = true
        }
    }
}

coproc zeroconf() -> (success: Bool)
    pre probCollision() * (1 - exp(probMessageLost(), maxTries())) + (1-probCollision())
    post [success]
{
    var collision: Bool = flip(probCollision())
    if collision {
        success = arp(maxTries())
    } else {
        success = true // no collision, no erroneous allocation
    }
}
