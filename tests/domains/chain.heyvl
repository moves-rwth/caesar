// RUN: @caesar @file

domain Exponentials {
    func ohnine_exp(exponent: UInt): UReal = ite(exponent == 0, 1, 0.9 * ohnine_exp(exponent))
    axiom ohnine_max forall exponent: UInt @trigger(ohnine_exp(exponent)). exponent < 1 || ohnine_exp(exponent) <= 0.9
}

coproc chain(len: UInt, init_c: Bool, init_x: UInt) -> (c: Bool, x: UInt)
    pre [!init_c && init_x < len] * (1-ohnine_exp(len-init_x)) + [init_c]
    post [c]
{
    c = init_c
    x = init_x
    var prob_choice: Bool;
    if !c && x < len {
        prob_choice = ber(1, 9);
        if prob_choice {
            c = true;
        } else {
            x = x + 1;
        };
        coassert [!c && x < len] * (1-ohnine_exp(len-x)) + [c];
        coassume ?(true);
    } else {
    };
}